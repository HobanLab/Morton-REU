for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
#run summary
temp_summary = summary(temp_genind)
#extract statistics & store results
results[,j,i] = temp_summary$pop.n.all
}
}
#look at results
results
#plot results
boxplot(results[1])
#plot results
boxplot(results[1,,1])
#plot results
boxplot(results[,,1])
boxplot(results[,,2])
boxplot(results[,,3])
boxplot(results[,,4])
boxplot(results[,,5])
#plot results
boxplot(results[,,1], aes(main = "Equal populations"))
#plot results
boxplot(results[,,1], main = "Equal populations")
#plot results
boxplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="pop.n.all")
boxplot(results[,,2], main="Unequal populations: extreme", xlab="Replicates", ylab="pop.n.all")
boxplot(results[,,3], main="Unequal populations: strong", xlab="Replicates", ylab="pop.n.all")
boxplot(results[,,4], main="Unequal populations: moderate", xlab="Replicates", ylab="pop.n.all")
boxplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="pop.n.all")
boxplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="pop.n.all", col=blue)
boxplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="pop.n.all", col="blue")
boxplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="pop.n.all", col="orchid")
boxplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="pop.n.all")
library(adegenet)
library(diveRsity)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\Users\kayle\Documents\Morton-REU\Attempt2_fullpop\Simulations\equal_pop",
"C:\Users\kayle\Documents\Morton-REU\Attempt2_fullpop\Simulations\unequal_pop_extreme",
"C:\Users\kayle\Documents\Morton-REU\Attempt2_fullpop\Simulations\unequal_pop_moderate",
"C:\Users\kayle\Documents\Morton-REU\Attempt2_fullpop\Simulations\unequal_pop_strong",
"C:\Users\kayle\Documents\Morton-REU\Attempt2_fullpop\Simulations\unequal_pop_weak")
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pop",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 populations
#10 replicates
#5 scenarios
results = array(0, dim = c(5,10,5))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
#total number of alleles in the population
total_n_alleles = ncol(temp_genind@tab)
t = 10
#number of alleles in 10 samples
sample_n_alleles = sum(colSums(temp_genind@tab[sample(1:nrow(temp_genind@tab), t),])>0)
results[,j,i] = sample_n_alleles
}
}
#look at results
results
#total number of alleles in the population
total_n_alleles = ncol(temp_genind@tab)
total_n_alleles
#total number of alleles in the population
total_n_alleles = ncol(temp_genind@tab)
t = 10
#number of alleles in 10 samples
sample_n_alleles = sum(colSums(temp_genind@tab[sample(1:nrow(temp_genind@tab), t),])>0)
sample_n_alleles
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
#
rows_to_samp = c(sample(1:100,10), sample(101:200, 10), sample(201:300, 10), sample(301:800, 50), sample(801:1500, 70))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
#
rows_to_samp = c(sample(1:100,10), sample(101:200, 10), sample(201:300, 10), sample(301:800, 50), sample(801:1500, 70))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
results[,j,i] = sample_n_alleles
}
}
library(adegenet)
library(diveRsity)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pop",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 populations
#10 replicates
#5 scenarios
results = array(0, dim = c(5,10,5))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
#total number of alleles in the population
total_n_alleles = ncol(temp_genind@tab)
t = 10
#number of alleles in 10 samples
sample_n_alleles = sum(colSums(temp_genind@tab[sample(1:nrow(temp_genind@tab), t),])>0)
results[,j,i] = sample_n_alleles
}
}
#look at results
results
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
#
rows_to_samp = c(sample(1:100,10), sample(101:200, 10), sample(201:300, 10), sample(301:800, 50), sample(801:1500, 70))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
results[,j,i] = sample_n_alleles
}
}
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
rows_to_samp = c(sample(1:100,10), sample(101:200, 10), sample(201:300, 10), sample(301:800, 50), sample(801:1500, 70))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp, t])>0)
results[,j,i] = sample_n_alleles
}
}
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
rows_to_samp = c(sample(1:100,10), sample(101:200, 10), sample(201:300, 10), sample(301:800, 50), sample(801:1500, 70))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
results[,j,i] = sample_n_alleles
}
}
##practice
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
##practice
setwd(scenarios[1])
list_files = list.files(path = scenarios[1], pattern = ".gen$")
##practice
setwd(scenarios[1])
list_files = list.files(path = scenarios[1], pattern = ".gen$")
temp_genind = read.genepop(list_files[[1:10]], ncode=3)
temp_genind = read.genepop(list_files[[1]], ncode=3)
for(j in 1:length(list_files)) {
temp_genind = read.genepop(list_files[[1]], ncode=3)
}
for(j in 1:length(list_files)) {
temp_genind = read.genepop(list_files[[j]], ncode=3)
}
##practice
setwd(scenarios[1])
list_files = list.files(path = scenarios[1], pattern = ".gen$")
for(j in 1:length(list_files)) {
temp_genind_practice = read.genepop(list_files[[j]], ncode=3)
}
rows_to_samp = c(sample(1:300,30), sample(301:600, 30), sample(601:900, 30), sample(901:1200, 30), sample(1201:1500, 30))
sample_n_alleles = sum(colSums(temp_genind_practice@tab[rows_to_samp,])>0)
sample_n_alleles = sum(colSums(temp_genind_practice@tab[rows_to_samp,],)>0)
sample_n_alleles = sum(colSums(temp_genind_practice@tab[sample(rows_to_samp),])>0)
sample_n_alleles = sum(colSums(temp_genind_practice@tab[rows_to_samp,])>0)
results[,1,1] = sample_n_alleles
results
#creating results array to store the results
#5 populations
#10 replicates
#5 scenarios
results = array(0, dim = c(5,10,5))
results
##practice/debugging
setwd(scenarios[1])
list_files = list.files(path = scenarios[1], pattern = ".gen$")
for(j in 1:length(list_files)) {
temp_genind_practice = read.genepop(list_files[[j]], ncode=3)
}
rows_to_samp = c(sample(1:300,30), sample(301:600, 30), sample(601:900, 30), sample(901:1200, 30), sample(1201:1500, 30))
sample_n_alleles = sum(colSums(temp_genind_practice@tab[rows_to_samp,])>0)
results[,1,1] = sample_n_alleles
results
rows_to_samp = list(sample(1:100,10), sample(101:200, 10), sample(201:300, 10), sample(301:800, 50), sample(801:1500, 70))
##practice/debugging
setwd(scenarios[1])
list_files = list.files(path = scenarios[1], pattern = ".gen$")
for(j in 1:length(list_files)) {
temp_genind_practice = read.genepop(list_files[[j]], ncode=3)
}
rows_to_samp = c(sample(1:300,30), sample(301:600, 30), sample(601:900, 30), sample(901:1200, 30), sample(1201:1500, 30))
sample_n_alleles = sum(colSums(temp_genind_practice@tab[rows_to_samp,])>0)
##practice/debugging
setwd(scenarios[1])
list_files = list.files(path = scenarios[1], pattern = ".gen$")
for(j in 1:length(list_files)) {
temp_genind_practice = read.genepop(list_files[[j]], ncode=3)
}
sample_n_alleles = sum(colSums(temp_genind_practice@tab[rows_to_samp,])>0)
rows_to_samp
dim(temp_genind_practice@tab)
library(adegenet)
library(diveRsity)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pop",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
library(adegenet)
library(diveRsity)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pops",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 populations
#10 replicates
#5 scenarios
results = array(0, dim = c(5,10,5))
#creating list of rows to sample
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:20,2), sample(21:120,10), sample(121:220,10), sample(221:320, 10), sample(321:1500,118))
rosw_to_samp[[3]] = c(sample(1:50,5), sample(51:250,20), sample(251:450,20), sample(451:650,20), sample(651:1500,85))
rows_to_samp[[3]] = c(sample(1:50,5), sample(51:250,20), sample(251:450,20), sample(451:650,20), sample(651:1500,85))
rows_to_samp[[4]] = c(sample(1:150,15), sample(151:350,20), sample(351:550,20), sample(551:750,20), sample(751:1500,75))
rows_to_samp[[5]] = c(sample(1:290,29), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,31))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
results[,j,i] = sample_n_alleles
}
}
#look at results
results
boxplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
plot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
boxplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,2], main="Unequal populations: extreme", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,2], main="Unequal populations: extreme", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,2], main="Unequal populations: strong", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,3], main="Unequal populations: strong", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,4], main="Unequal populations: moderate", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="sample_n_alleles")
#look at results
results
library(adegenet)
library(diveRsity)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pops",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 populations
#10 replicates
#5 scenarios
results = array(0, dim = c(5,10,5))
results
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,3), sample(31:130,10), sample(131:230,10), sample(231:330, 10), sample(331:1500,117))
rows_to_samp[[3]] = c(sample(1:50,5), sample(51:250,20), sample(251:450,20), sample(451:650,20), sample(651:1500,85))
rows_to_samp[[4]] = c(sample(1:150,15), sample(151:350,20), sample(351:550,20), sample(551:750,20), sample(751:1500,75))
rows_to_samp[[5]] = c(sample(1:290,29), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,31))
rows_to_samp[[1]]
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
results[,j,i] = sample_n_alleles
}
}
#look at results
results
barplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,2], main="Unequal populations: extreme", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,3], main="Unequal populations: strong", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,4], main="Unequal populations: moderate", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
library(adegenet)
library(diveRsity)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pops",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 populations
#10 replicates
#5 scenarios
results = array(0, dim = c(5,10,5))
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,30), sample(31:130,30), sample(131:230,30), sample(231:330,30), sample(331:1500,30))
rows_to_samp[[3]] = c(sample(1:50,30), sample(51:250,30), sample(251:450,30), sample(451:650,30), sample(651:1500,30))
rows_to_samp[[4]] = c(sample(1:150,30), sample(151:350,30), sample(351:550,30), sample(551:750,30), sample(751:1500,30))
rows_to_samp[[5]] = c(sample(1:290,30), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,30))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
results[,j,i] = sample_n_alleles
}
}
#look at results
results
barplot(results[,,1], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,2], main="Unequal populations: extreme", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,3], main="Unequal populations: strong", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,4], main="Unequal populations: moderate", xlab="Replicates", ylab="sample_n_alleles")
barplot(results[,,5], main="Unequal populations: weak", xlab="Replicates", ylab="sample_n_alleles")
library(ggplot2)
