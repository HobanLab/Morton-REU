}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 scenarios (each with 5 populations)
#10 replicates
results = array(0, dim = c(5,10))
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,30), sample(31:130,30), sample(131:230,30), sample(231:330,30), sample(331:1500,30))
rows_to_samp[[3]] = c(sample(1:50,30), sample(51:250,30), sample(251:450,30), sample(451:650,30), sample(651:1500,30))
rows_to_samp[[4]] = c(sample(1:150,30), sample(151:350,30), sample(351:550,30), sample(551:750,30), sample(751:1500,30))
rows_to_samp[[5]] = c(sample(1:290,30), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,30))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#look at results
results
##plots
barplot(results[1,], main="Equal populations", xlab="Replicates", ylab="sample_n_alleles")
#look at results
results
#get average alleles captured across all replicates for each scenario
mean(results[i,])
results_plot = data.frame()
results_plot = mean(results[i])
#get average alleles captured across all replicates for each scenario
for(i in 1:length(scenarios)) {
results_plot = mean(results[i])
}
results_plot
results_plot[i] = mean(results[i])
results_plot
results_plot = data.frame()
#get average alleles captured across all replicates for each scenario
for(i in 1:length(scenarios)) {
results_plot[i] = mean(results[i])
}
results_plot = array(5,1)
results_plot = array(0, dim = c(5,1))
results_plot
results_plot = array(0, dim = c(5,1))
#get average alleles captured across all replicates for each scenario
for(i in 1:length(scenarios)) {
results_plot[i,] = mean(results[i,])
}
results_plot
to.data.frame(results_plot)
##plots
ggplot(results_plot)
##plots
ggplot(results_plot) + geom_boxplot()
rlang::last_error()
results_plot = data.frame(0, dim = c(5,1))
#get average alleles captured across all replicates for each scenario
for(i in 1:length(scenarios)) {
results_plot[i,] = mean(results[i,])
}
##plots
ggplot(results_plot) + geom_boxplot()
rlang::last_error()
results_plot = data.frame(0, dim = c(5,1), row.names = c(1,2,3,4,5))
results_plot = data.frame(0, dim = c(5,1), row.names = c(1,2,3,4,5))
results_plot
results_plot = data.frame(0, dim = c(5,1))
#get average alleles captured across all replicates for each scenario
for(i in 1:length(scenarios)) {
results_plot[i,] = mean(results[i,])
}
results_plot
results_plot = data.frame(0, dim = c(5,0))
results_plot
results_plot = data.frame(0, dim = c(5,1))
results_plot
#look at results
results
results_plot = array(0, dim = c(5,1))
#get average alleles captured across all replicates for each scenario
for(i in 1:length(scenarios)) {
results_plot[i,] = mean(results[i,])
}
results_plot
plot(results_plot)
boxplot(results_plot)
boxplot(results_plot) %>%
group_by(row)
ggplot(results_plot)
ggplot(results_plot) + geom_boxplot()
as.data.frame(results_plot)
ggplot(results_plot) + geom_boxplot()
as.data.frame(results_plot)
results_plot = data.frame(alleles_captured = c(0))
results_plot
results_plot = data.frame(alleles_captured = c(0:0, rep(5)))
results_plot
results_plot = data.frame(alleles_captured = c(0,0,0,0,0))
results_plot
results_plot = data.frame(alleles_captured = c(0,0,0,0,0))
for(i in 1:length(scenarios)) {
results_plot$alleles_captured[i] = mean(results[i])
}
results_plot
results_plot$alleles_captured[i] = mean(results[i,])
results_plot
results_plot$alleles_captured = mean(results[i,])
results_plot
results_plot$alleles_captured[i] = mean(results[i,])
results_plot
results_plot = data.frame(alleles_captured = c(0,0,0,0,0))
for(i in 1:length(scenarios)) {
results_plot$alleles_captured[i] = mean(results[i,])
}
results_plot
ggplot(results_plot) + geom_boxplot()
ggplot(results_plot, aes(y=alleles_captured)) + geom_boxplot()
ggplot(results_plot, aes(x=rows, y=alleles_captured)) + geom_boxplot()
ggplot(results_plot, aes(x=row, y=alleles_captured)) + geom_boxplot()
results_plot
results_plot = data.frame(population = c(1,2,3,4,5), alleles_captured = c(0,0,0,0,0))
results_plot$population[i] = i
results_plot = data.frame(population = c(1,2,3,4,5), alleles_captured = c(0,0,0,0,0))
for(i in 1:length(scenarios)) {
results_plot$alleles_captured[i] = mean(results[i,])
results_plot$population[i] = i
}
results_plot
results_plot = data.frame(scenario = c(1,2,3,4,5), alleles_captured = c(0,0,0,0,0))
for(i in 1:length(scenarios)) {
results_plot$alleles_captured[i] = mean(results[i,])
results_plot$scenario[i] = i
}
results_plot
ggplot(results_plot, aes(x=scenario, y=alleles_captured)) + geom_boxplot()
ggplot(results_plot, aes(x=scenario, y=alleles_captured, group = scenario)) + geom_boxplot()
#look at results
results
ggplot(results) + geom_boxplot()
as.data.frame(results)
as.data.frame(results, row.names = "Scenarios", col.names = "replicates")
as.data.frame(results, row.names = "Scenarios", col.names = "replicates")
as.data.frame(results, row.names = c(0,0,0,0,0), col.names = "replicates")
as.data.frame(results, row.names = c(1,2,3,4,5), col.names = c(1,2,3,4,5,6,7,8,9,10))
as.data.frame(results, row.names = c(1,2,3,4,5), col.names = c(1,2,3,4,5,6,7,8,9,10))
#look at results
results
plot(,mean(results[i,]))
plot(results[i,] ,mean(results[i,]))
#look at results
results
#look at results
results
total_alleles = ncol(temp_genind@tab)
total_alleles
#look at results
results
results_plot = to.data.frame(results)
results_plot = data.frame(results)
results_plot
results_plot = data.frame(results, pop=c(1,2,3,4,5))
results_plot
results_plot = data.frame(results, pop=c(1,2,3,4,5), replicate =c(1,2,3,4,5,6,7,8,10))
results_plot = data.frame(scenario = c(1,2,3,4,5), alleles_captured = c(0,0,0,0,0))
results_plot
results_plot = data.frame(replicate = c(1:10), alleles_captured = c(0,0,0,0,0))
results_plot
results_plot = data.frame(scenario = c(1:5),)
results_plot = data.frame(scenario = c(1:5))
results_plot
results_plot = data.frame(scenario = c(1:5), 1,2,3,4,5,6,7,8,9,10)
results_plot
#look at results
results
results_plot = data.frame(scenario = c(1:5), 1,2,3,4,5,6,7,8,9,10)
results_plot
#look at results
results
library(adegenet)
library(diveRsity)
library(ggplot2)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pops",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 scenarios (each with 5 populations)
#10 replicates
results = array(0, dim = c(5,10))
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,30), sample(31:130,30), sample(131:230,30), sample(231:330,30), sample(331:1500,30))
rows_to_samp[[3]] = c(sample(1:50,30), sample(51:250,30), sample(251:450,30), sample(451:650,30), sample(651:1500,30))
rows_to_samp[[4]] = c(sample(1:150,30), sample(151:350,30), sample(351:550,30), sample(551:750,30), sample(751:1500,30))
rows_to_samp[[5]] = c(sample(1:290,30), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,30))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#look at results
results
results_plot = data.frame(scenario = c(1:5), 1,2,3,4,5,6,7,8,9,10)
#creating results array to store the results
#5 scenarios (each with 5 populations)
#10 replicates
results = data.frame(0, dim = c(5,10))
results
#creating results array to store the results
#5 scenarios (each with 5 populations)
#10 replicates
results = data.frame(scenario = c(1:5))
results
#look at results
results
library(adegenet)
library(diveRsity)
library(ggplot2)
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations"
#list of scenarios
#simulation file folder directories
scenarios = c("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\equal_pops",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_extreme",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_strong",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_moderate",
"C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt2_fullpop\\Simulations\\unequal_pop_weak")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
setwd(mypath)
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
##converting .arp to .gen
for(i in 1:length(scenarios)) {
import_arp2gen_files(scenarios[i], ".arp$")
}
#creating results array to store the results
#5 scenarios (each with 5 populations)
#10 replicates
results = array(0, dim = c(5,10))
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,30), sample(31:130,30), sample(131:230,30), sample(231:330,30), sample(331:1500,30))
rows_to_samp[[3]] = c(sample(1:50,30), sample(51:250,30), sample(251:450,30), sample(451:650,30), sample(651:1500,30))
rows_to_samp[[4]] = c(sample(1:150,30), sample(151:350,30), sample(351:550,30), sample(551:750,30), sample(751:1500,30))
rows_to_samp[[5]] = c(sample(1:290,30), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,30))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#look at results
results
ggplot(as.data.frame(results)) + geom_boxplot()
`rlang::last_error()`
rlang::last_error()
ggplot(as.data.frame(results), aes(x=results[1:5,],y=results[,1:10])) + geom_boxplot()
rlang::last_error()
ggplot(as.data.frame(results), aes(x=results[1:5,])) + geom_boxplot()
ggplot(as.data.frame(results), aes(x=results[1:5,])) + geom_boxplot()
rlang::last_error()
ggplot(as.data.frame(results), aes(x=results[row,])) + geom_boxplot()
ggplot(as.data.frame(results), aes(x=results)) + geom_boxplot()
boxplot(results)
boxplot(results[1])
boxplot(results[[1]])
boxplot(results)
results %>%
group_by(x)
row.names = c("scen1", "scen2", "scen3", "scen4", "scen5")
row.names = c("scen1", "scen2", "scen3", "scen4", "scen5")
column.names = c("rep1", "rep2", "rep3", "rep4", "rep5", "rep6", "rep7", "rep8", "rep9", "rep10")
#creating results array to store the results
#5 scenarios (each with 5 populations)
#10 replicates
results = array(0, dim = c(5,10), dimnames = list(row.names, column.names))
results
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,30), sample(31:130,30), sample(131:230,30), sample(231:330,30), sample(331:1500,30))
rows_to_samp[[3]] = c(sample(1:50,30), sample(51:250,30), sample(251:450,30), sample(451:650,30), sample(651:1500,30))
rows_to_samp[[4]] = c(sample(1:150,30), sample(151:350,30), sample(351:550,30), sample(551:750,30), sample(751:1500,30))
rows_to_samp[[5]] = c(sample(1:290,30), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,30))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#look at results
results
results_plot = as.data.frame(results)
results_plot
plot(results_plot$scen1)
results_plot
plot(results_plot$scen1)
ggplot(results_plot)
ggplot(results_plot) +geom_boxplot()
scenario = c("scen1", "scen2", "scen3", "scen4", "scen5")
ggplot(results_plot, aes(x=scenario)) +geom_boxplot()
#look at results
results
boxplot(results[i,], results[,j])
boxplot(results[1:5,], results[,1:10])
boxplot(results[1,])
boxplot(results[1:5,])
boxplot(mean(results[1:5,]))
#look at results
results
library(tidyr)
results_plot = as.data.frame(results)
results_plot
results_plot_long = gather(results_plot, scenario, prop_all)
results_plot_long
results_plot_long = gather(results_plot, scenario, replicate, prop_all)
results_plot_long = gather(results_plot, scenario, prop_all)
results_plot_long
results_plot_long = gather(results_plot, replicate, prop_all)
results_plot_long
results_plot_long$scenario
scenario = rep(c(1,2,3,4,5), 10)
scenario
results_plot_long$scenario=scenario
results_plot_long
ggplot(results_plot_long, aes(x=scenario, y=prop_all)) + geom_boxplot()
as.factor(scenario)
ggplot(results_plot_long, aes(x=scenario, y=prop_all)) + geom_boxplot()
#plotting
results_plot = as.data.frame(results)
results_plot
results_plot_long = gather(results_plot, replicate, prop_all)
results_plot_long
results_plot_long$scenario=scenario
scenario = rep(c(1,2,3,4,5), 10)
as.factor(scenario)
results_plot_long$scenario=scenario
ggplot(results_plot_long, aes(x=scenario, y=prop_all)) + geom_boxplot()
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario)) + geom_boxplot()
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, color=scenario)) + geom_boxplot()
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
#plotting
results_plot = as.data.frame(results)
results_plot_long = gather(results_plot, replicate, prop_all)
scenario = rep(c(1,2,3,4,5), 10)
as.factor(scenario)
results_plot_long$scenario=scenario
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
#look at results
results
#plotting
#this is a mess
results_plot = as.data.frame(results)
results_plot_long = gather(results_plot, replicate, prop_all)
scenario = rep(c(1,2,3,4,5), 10)
as.factor(scenario)
results_plot_long$scenario=scenario
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,30), sample(31:130,30), sample(131:230,30), sample(231:330,30), sample(331:1500,30))
rows_to_samp[[3]] = c(sample(1:50,30), sample(51:250,30), sample(251:450,30), sample(451:650,30), sample(651:1500,30))
rows_to_samp[[4]] = c(sample(1:150,30), sample(151:350,30), sample(351:550,30), sample(551:750,30), sample(751:1500,30))
rows_to_samp[[5]] = c(sample(1:290,30), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,30))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#look at results
results
#plotting
#this is a mess
results_plot = as.data.frame(results)
results_plot_long = gather(results_plot, replicate, prop_all)
scenario = rep(c(1,2,3,4,5), 10)
as.factor(scenario)
results_plot_long$scenario=scenario
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
#creating list of vectors representing rows to sample from genind object
#sampling 10% from each population
#5 pops in each scenario
rows_to_samp = list(length = length(scenarios))
rows_to_samp[[1]] = c(sample(1:300,30), sample(301:600,30), sample(601:900,30), sample(901:1200,30), sample(1201:1500,30))
rows_to_samp[[2]] = c(sample(1:30,3), sample(31:130,10), sample(131:230,10), sample(231:330, 10), sample(331:1500,117))
rows_to_samp[[3]] = c(sample(1:50,5), sample(51:250,20), sample(251:450,20), sample(451:650,20), sample(651:1500,85))
rows_to_samp[[4]] = c(sample(1:150,15), sample(151:350,20), sample(351:550,20), sample(551:750,20), sample(751:1500,75))
rows_to_samp[[5]] = c(sample(1:290,29), sample(291:590,30), sample(591:890,30), sample(891:1190,30), sample(1191:1500,31))
#loop through scenarios
for(i in 1:length(scenarios)) {
setwd(scenarios[i])
list_files = list.files(path = scenarios[i], pattern = ".gen$")
#loop through replicates
for(j in 1:length(list_files)) {
#convert to genind
temp_genind = read.genepop(list_files[[j]], ncode=3)
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp[[i]],])>0)
total_alleles = ncol(temp_genind@tab)
results[i,j] = sample_n_alleles/total_alleles
}
}
#look at results
results
#plotting
results_plot = as.data.frame(results)
results_plot_long = gather(results_plot, replicate, prop_all)
scenario = rep(c(1,2,3,4,5), 10)
as.factor(scenario)
results_plot_long$scenario=scenario
ggplot(results_plot_long, aes(x=scenario, y=prop_all, group=scenario, fill=scenario)) + geom_boxplot()
