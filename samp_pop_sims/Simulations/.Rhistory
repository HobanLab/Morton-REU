##calculation of the high migration percent alleles captured per category in either equal or proportional sampling strategy
##array dims:
#dim 1: replicates of each scenario (100 total)
#dim 2: % of alleles captured in each category (global, globally v common, etc.)
#dim 3: scenarios 1 - 9 (very different population sizes --> equal population sizes)
for (d in 1:length(allele_cat_tot)) highmig_equal_per[k,d,j] <- round(sum(alleles_cap_equal[allele_cat_tot[[d]]]>0)/length(allele_cat_tot[[d]]),4)
for (e in 1:length(allele_cat_tot)) highmig_prop_per[k,e,j] <- round(sum(alleles_cap_prop[allele_cat_tot[[e]]]>0)/length(allele_cat_tot[[e]]),4)
} #else { #if low migration
##calculate the total number of alleles in each frequency category over 9 allele categories for the low migration combination
##array dims:
#dim 1: replicates of each scenario (100 total)
#dim 2: allele frequency category of all alleles - global, globally v common, etc.
#dim 3: scenarios 1 - 9 (very different population sizes --> equal population sizes)
for (a in 1:length(allele_cat_tot)) lowmig_all_existing_by_sp_reps[k,a,j] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
##calculate the number of alleles captured in each category for equal and proportional sampling strategies
##array dims:
#dim 1: replicates of each scenario (100 total)
#dim 2: number of alleles captured in each category (global, globally v common, etc.)
#dim 3: scenarios 1 - 9 (very different population sizes --> equal population sizes)
for (b in 1:length(allele_cat_tot)) lowmig_equal_alleles[k,b,j] <- round(sum(alleles_cap_equal[allele_cat_tot[[b]]]>0))
for (c in 1:length(allele_cat_tot)) lowmig_prop_alleles[k,c,j] <- round(sum(alleles_cap_prop[allele_cat_tot[[c]]]>0))
##calculation of the high migration percent alleles captured per category in either equal or proportional sampling strategy
##array dims:
#dim 1: replicates of each scenario (100 total)
#dim 2: % of alleles captured in each category (global, globally v common, etc.)
#dim 3: scenarios 1 - 9 (very different population sizes --> equal population sizes)
for (d in 1:length(allele_cat_tot)) lowmig_equal_per[k,d,j] <- round(sum(alleles_cap_equal[allele_cat_tot[[d]]]>0)/length(allele_cat_tot[[d]]),4)
for (e in 1:length(allele_cat_tot)) lowmig_prop_per[k,e,j] <- round(sum(alleles_cap_prop[allele_cat_tot[[e]]]>0)/length(allele_cat_tot[[e]]),4)
}
}
}
##Loop to calculate means over all replicates for allele capture code
#store results in multiple 2D arrays
for(j in 1:length(allele_cat_tot)) {
for (f in 1:length(allele_cat_tot)) {
##Calculate, for the high mig combo, the mean number of alleles per category (from 100 replicates)
highmig_alleles_existing_by_cat[f,j] <-  round(mean(highmig_all_existing_by_sp_reps[,j,f]), digits = 4)
##Calculate the number of alleles in each category captured by each strategy
highmig_equal_mean_all_cap[f,j] <- round(mean(highmig_equal_alleles[,j,f]), 4)
highmig_prop_mean_all_cap[f,j] <- round(mean(highmig_prop_alleles[,j,f]), 4)
##Calculate the percent capture of existing alleles in these categories
highmig_equal_mean_all_cap_per[f,j] <- round(mean(highmig_equal_per[,j,f]), 4)*100
highmig_prop_mean_all_cap_per[f,j] <- round(mean(highmig_prop_per[,j,f]), 4)*100
}
}
##name rows and columns
rownames(highmig_alleles_existing_by_cat) <- c("Scenario 1", "Scenario 2", "Scenario 3", "Scenario 4", "Scenario 5",
"Scenario 6", "scenario 7", "Scenario 8", "Scenario 9")
colnames(highmig_alleles_existing_by_cat) <- list_allele_cat
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims_bottleneck")
write.csv(highmig_alleles_existing_by_cat, "highmig_alleles_existing_by_cat.csv")
##high mig, allelic capture equal sampling strategy data frame
highmig_all_cap_equal_df <- matrix(nrow = length(allele_cat_tot),
ncol = length(allele_cat_tot))
##loop to merge information
for(m in 1:length(highmig_equal_mean_all_cap_per[,1])){
for(n in 1:length(highmig_equal_mean_all_cap_per[,1])){
highmig_all_cap_equal_df[m,n] <- paste0(highmig_equal_mean_all_cap_per[m,n], "%", " ", "(", highmig_equal_mean_all_cap[m,n], ")")
}
}
##name rows and columns
rownames(highmig_all_cap_equal_df) <- c("Scenario 1", "Scenario 2", "Scenario 3", "Scenario 4", "Scenario 5",
"Scenario 6", "scenario 7", "Scenario 8", "Scenario 9")
colnames(highmig_all_cap_equal_df) <- list_allele_cat
##high mig, allelic capture proportional sampling strategy data frame
highmig_all_cap_prop_df <- matrix(nrow = length(allele_cat_tot),
ncol = length(allele_cat_tot))
##loop to merge information
for(o in 1:length(highmig_prop_mean_all_cap_per[,1])){
for(p in 1:length(highmig_prop_mean_all_cap_per[,1])){
highmig_all_cap_prop_df[o,p] <- paste0(highmig_prop_mean_all_cap_per[o,p], "%", " ", "(", highmig_prop_mean_all_cap[o,p], ")")
}
}
##name rows and columns
rownames(highmig_all_cap_equal_df) <- c("Scenario 1", "Scenario 2", "Scenario 3", "Scenario 4", "Scenario 5",
"Scenario 6", "scenario 7", "Scenario 8", "Scenario 9")
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims_bottleneck")
##write out data frames
write.csv(highmig_all_cap_equal_df, "highmig_all_cap_equal_df.csv")
write.csv(highmig_all_cap_prop_df, "highmig_all_cap_prop_df.csv")
##Loop to calculate means over all replicates for allele capture code
#store results in multiple 2D arrays
for(j in 1:length(allele_cat_tot)) {
for (f in 1:length(allele_cat_tot)) {
##Calculate, for the high mig combo, the mean number of alleles per category (from 100 replicates)
lowmig_alleles_existing_by_cat[f,j] <-  round(mean(lowmig_all_existing_by_sp_reps[,j,f]), 4)
##Calculate the number of alleles in each category captured by each strategy
lowmig_equal_mean_all_cap[f,j] <- round(mean(lowmig_equal_alleles[,j,f]), 4)
lowmig_prop_mean_all_cap[f,j] <- round(mean(lowmig_prop_alleles[,j,f]), 4)
##Calculate the percent capture of existing alleles in these categories
lowmig_equal_mean_all_cap_per[f,j] <- round(mean(lowmig_equal_per[,j,f]), 4)*100
lowmig_prop_mean_all_cap_per[f,j] <- round(mean(lowmig_prop_per[,j,f]), 4)*100
}
}
##name rows and columns
rownames(lowmig_alleles_existing_by_cat) <- c("Scenario 1", "Scenario 2", "Scenario 3", "Scenario 4", "Scenario 5",
"Scenario 6", "scenario 7", "Scenario 8", "Scenario 9")
colnames(lowmig_alleles_existing_by_cat) <- list_allele_cat
####migration data frames to combine # and % of allelic frequencies captured
##low mig equal sampling strategy allelic capture data frame
lowmig_all_cap_equal_df <- matrix(nrow = length(allele_cat_tot),
ncol = length(allele_cat_tot))
##loop to merge information
for(m in 1:length(lowmig_equal_mean_all_cap_per[,1])){
for(n in 1:length(lowmig_equal_mean_all_cap_per[,1])){
lowmig_all_cap_equal_df[m,n] <- paste0(lowmig_equal_mean_all_cap_per[m,n], "%", " ", "(", lowmig_equal_mean_all_cap[m,n], ")")
}
}
##name rows and columns
rownames(lowmig_all_cap_equal_df) <- c("Scenario 1", "Scenario 2", "Scenario 3", "Scenario 4", "Scenario 5",
"Scenario 6", "scenario 7", "Scenario 8", "Scenario 9")
colnames(lowmig_all_cap_equal_df) <- list_allele_cat
##low mig proportional sampling strategy allelic capture data frame
lowmig_all_cap_prop_df <- matrix(nrow = length(allele_cat_tot),
ncol = length(allele_cat_tot))
##loop to merge information
for(o in 1:length(lowmig_prop_mean_all_cap_per[,1])){
for(p in 1:length(lowmig_prop_mean_all_cap_per[,1])){
lowmig_all_cap_prop_df[o,p] <- paste0(lowmig_prop_mean_all_cap_per[o,p], "%", " ", "(", lowmig_prop_mean_all_cap[o,p], ")")
}
}
rownames(lowmig_all_cap_prop_df) <- c("Scenario 1", "Scenario 2", "Scenario 3", "Scenario 4", "Scenario 5",
"Scenario 6", "scenario 7", "Scenario 8", "Scenario 9")
colnames(lowmig_all_cap_prop_df) <- list_allele_cat
##write out data frames
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims_bottleneck")
write.csv(lowmig_all_cap_equal_df, "lowmig_all_cap_equal_df.csv")
write.csv(lowmig_all_cap_prop_df, "lowmig_all_cap_prop_df.csv")
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims_bottleneck")
write.csv(lowmig_alleles_existing_by_cat, "lowmig_alleles_existing_by_cat.csv")
last_ind
first_ind
#stores the number of alleles captured by the sample strategy (instead of proportion of alleles captured)
#high intensity
samp_all_highMig_highSamp_equal = array(0, dim = c(9,100))
samp_all_lowMig_highSamp_equal = array(0, dim = c(9,100))
samp_all_highMig_highSamp_prop = array(0, dim = c(9,100))
samp_all_lowMig_highSamp_prop = array(0, dim = c(9,100))
#low intensity
samp_all_highMig_lowSamp_equal = array(0, dim = c(9,100))
samp_all_lowMig_lowSamp_equal = array(0, dim = c(9,100))
samp_all_highMig_lowSamp_prop = array(0, dim = c(9,100))
samp_all_lowMig_lowSamp_prop = array(0, dim = c(9,100))
#Library functions
library(adegenet)
library(hierfstat)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
#Flags
#File conversion flag
#This flag is set to false when simulations have been run and files have been converted already
#There is no need to re-convert the files once they have been converted once
#if you want to re-run conversions or you re-ran simulations, set this to TRUE
convert = FALSE
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
f <- FALSE
#defining root directory (containing sub-folders)
#and setting working directory
my_dir = "C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims\\Simulations"
setwd(my_dir)
#list of combinations
#combination sub-folder directories extensions
combinations = c("\\highMig_highSamp", "\\lowMig_highSamp", "\\highMig_lowSamp", "\\lowMig_lowSamp")
#list of scenarios
#simulation sub-folder directories extensions
scenarios = c("\\scen1",
"\\scen2",
"\\scen3",
"\\scen4",
"\\scen5",
"\\scen6",
"\\scen7",
"\\scen8",
"\\scen9")
#defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
#DEFINING ARRAYS TO STORE RESULTS
#stores proportion of alleles captured for both strategies -- equal and proportional
#high intensity
results_highMig_highSamp_equal = array(0, dim = c(9,100))
results_lowMig_highSamp_equal = array(0, dim = c(9,100))
results_highMig_highSamp_prop = array(0, dim = c(9,100))
results_lowMig_highSamp_prop = array(0, dim = c(9,100))
#low intensity
results_highMig_lowSamp_equal = array(0, dim = c(9,100))
results_lowMig_lowSamp_equal = array(0, dim = c(9,100))
results_highMig_lowSamp_prop = array(0, dim = c(9,100))
results_lowMig_lowSamp_prop = array(0, dim = c(9,100))
#stores the total alleles present
total_alleles_highMig = array(0, dim = c(9, 100))
total_alleles_lowMig = array(0, dim = c(9, 100))
#stores the number of alleles captured by the sample strategy (instead of proportion of alleles captured)
#high intensity
samp_all_highMig_highSamp_equal = array(0, dim = c(9,100))
samp_all_lowMig_highSamp_equal = array(0, dim = c(9,100))
samp_all_highMig_highSamp_prop = array(0, dim = c(9,100))
samp_all_lowMig_highSamp_prop = array(0, dim = c(9,100))
#low intensity
samp_all_highMig_lowSamp_equal = array(0, dim = c(9,100))
samp_all_lowMig_lowSamp_equal = array(0, dim = c(9,100))
samp_all_highMig_lowSamp_prop = array(0, dim = c(9,100))
samp_all_lowMig_lowSamp_prop = array(0, dim = c(9,100))
#defining array to store the expected heterozygosity for each locus
hexp_highMig = array(0, dim = c(9,100))
hexp_lowMig = array(0, dim = c(9,100))
#####Fst saving
##high mig lists
highmig_hierfstat <- list(list(), list(), list(), list(),  list(),
list(), list(), list(), list())
##low mig lists
lowmig_hierfstat <- list(list(), list(), list(), list(),  list(),
list(), list(), list(), list())
##arrays low and high mig
highmig_pwfst_array <- array(dim = c(5,5,100,9))
lowmig_pwfst_array <- array(dim = c(5,5,100,9))
##min max mean fst arrays
highmig_fst_min_mean_max <- array(dim = c(3,100,9))
lowmig_fst_min_mean_max <- array(dim = c(3,100,9))
##results dfs
highmig_pwfst_output <- matrix(nrow = 9, ncol = 3)
lowmig_pwfst_output <- matrix(nrow = 9, ncol = 3)
###########################################################################################################
#Sampling loop - converts replicates to genind objects and performs sampling
#looping over combinations, scenarios, and replicates
#saving results in 2D arrays
#first loop over combinations (migration rate + sample intensity)
#i = combination
for(i in 1:length(combinations)) {
#next, loop through each scenario (1-9) for each combination
#j = scenario
for(j in 1:length(scenarios)) {
#update working directory for each scenario (to navigate through files)
setwd(paste(my_dir,combinations[i],scenarios[j],sep=""))
#create a list of all .gen files (ie., simulation replicates)
list_files = list.files(path = paste(my_dir,combinations[i],scenarios[j],sep=""), pattern = ".gen$")
#finally, loop through every replicate for each scenario, in each combination
#k = replicate
for(k in 1:length(list_files)) {
#creating a temporary genind object of the simulation replicate
temp_genind = read.genepop(list_files[[k]], ncode=3)
#defining population boundaries by the first individual and the last individuals
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 5 values since we have 5 populations
first_ind = first_ind[1:5]
#defining how many individuals to sample from every population
#it varies based on which combination the loop is in (based on sample intensity)
#the first two combinations are high intensity sampling, the last two are low intensity
#if high intensity, sample 10% of each population, or 30 individuals equally
if((i == 1) || (i == 2)) {
sample_size_prop = as.numeric(table(temp_genind@pop)*0.1)
sample_size_equal = c(30,30,30,30,30)
} else { #if low intensity, sample 5% of each population , or 15 individuals equally
sample_size_prop = as.numeric(table(temp_genind@pop)*0.05)
sample_size_equal = c(15,15,15,15,15)
}
#defining individuals to randomly sample from each population for both strategies
#from above, we defined the population boundaries of each population by the first and last individuals of the populations
#ie., the 'range' of the populations is defined as (first_ind:last_ind)
#here, we are defining which individuals to sample from, for each of the populations
#so we are sampling a certain amount (define in sample_size... variable) from the population 'ranges'
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]), sample(first_ind[5]:last_ind[5], sample_size_equal[5]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]), sample(first_ind[5]:last_ind[5], sample_size_prop[5]))
#calculating and saving the alleles sampled
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#saving the total alleles present
total_alleles = ncol(temp_genind@tab)
#saving results in matrices
#where the results need to be saved depends on what iteration the loop is in
#if the loop is the first combination (high intensity, high migration), save results here (checking based on variable 'i', the loop counter for the outermost loop)
if(i == 1) {
#saving proportion of alleles captured for both equal and proportional strategies
results_highMig_highSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_highMig_highSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_highMig_highSamp_equal[j,k] = sample_n_alleles_equal
samp_all_highMig_highSamp_prop[j,k] = sample_n_alleles_prop
#saving total alleles present for each replicate
total_alleles_highMig[j,k] = total_alleles
#saving expected heterozygosity
sum_temp_genind = summary(temp_genind)
hexp_highMig[j,k] = mean(sum_temp_genind$Hexp)
if(f == TRUE) {
##convert to hierfstat data frame and store in list
highmig_hierfstat[[j]][[k]] <- genind2hierfstat(temp_genind)
##pairwise fst results for all scenarios and replicates stored in a 4D array -
highmig_pwfst_array[,,k,j] <-  pairwise.neifst(highmig_hierfstat[[j]][[k]])
##calculate max, min, and mean pwfst for every replicate
highmig_fst_min_mean_max[1,k,j] <- mean(highmig_pwfst_array[,,k,j], na.rm = TRUE)
highmig_fst_min_mean_max[2,k,j] <- min(highmig_pwfst_array[,,k,j], na.rm = TRUE)
highmig_fst_min_mean_max[3,k,j] <- max(highmig_pwfst_array[,,k,j], na.rm = TRUE)
##write loops to calculate the mean of min/max/mean pwfst and then do it across scenario
for(a in 1:length(scenarios)){
for(b in 1:3){
highmig_pwfst_output[a,b] <- round(mean(highmig_fst_min_mean_max[b,,a]),3)
}
}
}
} else if (i == 2) { #if the loop is in the second combination (low migration, high intensity), save results here
#saving proportion of alleles captured for both equal and proportional strategies
results_lowMig_highSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_lowMig_highSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_lowMig_highSamp_equal[j,k] = sample_n_alleles_equal
samp_all_lowMig_highSamp_prop[j,k] = sample_n_alleles_prop
#saving total alleles present
total_alleles_lowMig[j,k] = total_alleles
#saving expected heterozyogisty
sum_temp_genind = summary(temp_genind)
hexp_lowMig[j,k] = mean(sum_temp_genind$Hexp)
if(f == TRUE) {
##convert to hierfstat data frame and store in a list
lowmig_hierfstat[[j]][[k]] <- genind2hierfstat(temp_genind)
##pairwise fst results for all scenarios and replicates stored in a 4D array
lowmig_pwfst_array[,,k,j] <-  pairwise.neifst(lowmig_hierfstat[[j]][[k]])
##calculate max, min, and mean pwfst for every replicate
lowmig_fst_min_mean_max[1,k,j] <- mean(lowmig_pwfst_array[,,k,j], na.rm = TRUE)
lowmig_fst_min_mean_max[2,k,j] <- min(lowmig_pwfst_array[,,k,j], na.rm = TRUE)
lowmig_fst_min_mean_max[3,k,j] <- max(lowmig_pwfst_array[,,k,j], na.rm = TRUE)
##write loops to calculate the mean of min/max/mean pwfst and then do it across scenario
for(a in 1:length(scenarios)){
for(b in 1:3){
lowmig_pwfst_output[a,b] <- round(mean(lowmig_fst_min_mean_max[b,,a]),3)
}
}
}
} else if (i == 3) { #if loop is in high migration, low intensity combination, save results here
##saving proportion of alleles captured for both equal and proportional strategies
results_highMig_lowSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_highMig_lowSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_highMig_lowSamp_equal[j,k] = sample_n_alleles_equal
samp_all_highMig_lowSamp_prop[j,k] =  sample_n_alleles_prop
#we don't need to save the total alleles present or hexp again, since we are using the same data as the high migration combination above (i = 1)
} else { # (i==4) if loop is in low migration, low intensity combination, save results here
#saving proportion of alleles captured for both equal and proportional strategies
results_lowMig_lowSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_lowMig_lowSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_lowMig_lowSamp_equal[j,k] = sample_n_alleles_equal
samp_all_lowMig_lowSamp_prop[j,k] = sample_n_alleles_prop
#we don't need to save the total alleles present or hexp again, since we are using the same data as the low migration combination above (i = 2)
}
}
}
}
samp_all_highMig_highSamp_equal
total_alleles
total_alleles_highMig
###########################################################################################################
#Sampling loop - converts replicates to genind objects and performs sampling
#looping over combinations, scenarios, and replicates
#saving results in 2D arrays
#first loop over combinations (migration rate + sample intensity)
#i = combination
for(i in 1:length(combinations)) {
#next, loop through each scenario (1-9) for each combination
#j = scenario
for(j in 1:length(scenarios)) {
#update working directory for each scenario (to navigate through files)
setwd(paste(my_dir,combinations[i],scenarios[j],sep=""))
#create a list of all .gen files (ie., simulation replicates)
list_files = list.files(path = paste(my_dir,combinations[i],scenarios[j],sep=""), pattern = ".gen$")
#finally, loop through every replicate for each scenario, in each combination
#k = replicate
for(k in 1:length(list_files)) {
#creating a temporary genind object of the simulation replicate
temp_genind = read.genepop(list_files[[k]], ncode=3)
#defining population boundaries by the first individual and the last individuals
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 5 values since we have 5 populations
first_ind = first_ind[1:5]
#defining how many individuals to sample from every population
#it varies based on which combination the loop is in (based on sample intensity)
#the first two combinations are high intensity sampling, the last two are low intensity
#if high intensity, sample 10% of each population, or 30 individuals equally
if((i == 1) || (i == 2)) {
sample_size_prop = as.numeric(table(temp_genind@pop)*0.1)
sample_size_equal = c(30,30,30,30,30)
} else { #if low intensity, sample 5% of each population , or 15 individuals equally
sample_size_prop = as.numeric(table(temp_genind@pop)*0.05)
sample_size_equal = c(15,15,15,15,15)
}
#defining individuals to randomly sample from each population for both strategies
#from above, we defined the population boundaries of each population by the first and last individuals of the populations
#ie., the 'range' of the populations is defined as (first_ind:last_ind)
#here, we are defining which individuals to sample from, for each of the populations
#so we are sampling a certain amount (define in sample_size... variable) from the population 'ranges'
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]), sample(first_ind[5]:last_ind[5], sample_size_equal[5]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]), sample(first_ind[5]:last_ind[5], sample_size_prop[5]))
#calculating and saving the alleles sampled
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#saving the total alleles present
total_alleles = ncol(temp_genind@tab)
#saving results in matrices
#where the results need to be saved depends on what iteration the loop is in
#if the loop is the first combination (high intensity, high migration), save results here (checking based on variable 'i', the loop counter for the outermost loop)
if(i == 1) {
#saving proportion of alleles captured for both equal and proportional strategies
results_highMig_highSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_highMig_highSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_highMig_highSamp_equal[j,k] = sample_n_alleles_equal
samp_all_highMig_highSamp_prop[j,k] = sample_n_alleles_prop
#saving total alleles present for each replicate
total_alleles_highMig[j,k] = total_alleles
#saving expected heterozygosity
sum_temp_genind = summary(temp_genind)
hexp_highMig[j,k] = mean(sum_temp_genind$Hexp)
if(f == TRUE) {
##convert to hierfstat data frame and store in list
highmig_hierfstat[[j]][[k]] <- genind2hierfstat(temp_genind)
##pairwise fst results for all scenarios and replicates stored in a 4D array -
highmig_pwfst_array[,,k,j] <-  pairwise.neifst(highmig_hierfstat[[j]][[k]])
##calculate max, min, and mean pwfst for every replicate
highmig_fst_min_mean_max[1,k,j] <- mean(highmig_pwfst_array[,,k,j], na.rm = TRUE)
highmig_fst_min_mean_max[2,k,j] <- min(highmig_pwfst_array[,,k,j], na.rm = TRUE)
highmig_fst_min_mean_max[3,k,j] <- max(highmig_pwfst_array[,,k,j], na.rm = TRUE)
##write loops to calculate the mean of min/max/mean pwfst and then do it across scenario
for(a in 1:length(scenarios)){
for(b in 1:3){
highmig_pwfst_output[a,b] <- round(mean(highmig_fst_min_mean_max[b,,a]),3)
}
}
}
} else if (i == 2) { #if the loop is in the second combination (low migration, high intensity), save results here
#saving proportion of alleles captured for both equal and proportional strategies
results_lowMig_highSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_lowMig_highSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_lowMig_highSamp_equal[j,k] = sample_n_alleles_equal
samp_all_lowMig_highSamp_prop[j,k] = sample_n_alleles_prop
#saving total alleles present
total_alleles_lowMig[j,k] = total_alleles
#saving expected heterozyogisty
sum_temp_genind = summary(temp_genind)
hexp_lowMig[j,k] = mean(sum_temp_genind$Hexp)
if(f == TRUE) {
##convert to hierfstat data frame and store in a list
lowmig_hierfstat[[j]][[k]] <- genind2hierfstat(temp_genind)
##pairwise fst results for all scenarios and replicates stored in a 4D array
lowmig_pwfst_array[,,k,j] <-  pairwise.neifst(lowmig_hierfstat[[j]][[k]])
##calculate max, min, and mean pwfst for every replicate
lowmig_fst_min_mean_max[1,k,j] <- mean(lowmig_pwfst_array[,,k,j], na.rm = TRUE)
lowmig_fst_min_mean_max[2,k,j] <- min(lowmig_pwfst_array[,,k,j], na.rm = TRUE)
lowmig_fst_min_mean_max[3,k,j] <- max(lowmig_pwfst_array[,,k,j], na.rm = TRUE)
##write loops to calculate the mean of min/max/mean pwfst and then do it across scenario
for(a in 1:length(scenarios)){
for(b in 1:3){
lowmig_pwfst_output[a,b] <- round(mean(lowmig_fst_min_mean_max[b,,a]),3)
}
}
}
} else if (i == 3) { #if loop is in high migration, low intensity combination, save results here
##saving proportion of alleles captured for both equal and proportional strategies
results_highMig_lowSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_highMig_lowSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_highMig_lowSamp_equal[j,k] = sample_n_alleles_equal
samp_all_highMig_lowSamp_prop[j,k] =  sample_n_alleles_prop
#we don't need to save the total alleles present or hexp again, since we are using the same data as the high migration combination above (i = 1)
} else { # (i==4) if loop is in low migration, low intensity combination, save results here
#saving proportion of alleles captured for both equal and proportional strategies
results_lowMig_lowSamp_equal[j,k] = sample_n_alleles_equal/total_alleles
results_lowMig_lowSamp_prop[j,k] = sample_n_alleles_prop/total_alleles
#saving number of alleles captured
samp_all_lowMig_lowSamp_equal[j,k] = sample_n_alleles_equal
samp_all_lowMig_lowSamp_prop[j,k] = sample_n_alleles_prop
#we don't need to save the total alleles present or hexp again, since we are using the same data as the low migration combination above (i = 2)
}
}
}
}
#######################################################################################################################
#saving results to R data file
#save proportion of alleles captured
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims\\Simulations")
save(results_highMig_highSamp_equal, results_highMig_highSamp_prop, file="results_highMig_highSamp.Rdata")
save(results_lowMig_highSamp_equal, results_lowMig_highSamp_prop, file="results_lowMig_highSamp.Rdata")
save(results_highMig_lowSamp_equal, results_highMig_lowSamp_prop, file="results_highMig_lowSamp.Rdata")
save(results_lowMig_lowSamp_equal, results_lowMig_lowSamp_prop, file="results_lowMig_lowSamp.Rdata")
#save number of alleles captured
save(samp_all_highMig_highSamp_equal, samp_all_highMig_highSamp_prop, file="alleles_capt_highMig_highSamp.Rdata")
save(samp_all_highMig_lowSamp_equal, samp_all_highMig_lowSamp_prop, file="alleles_capt_highMig_lowSamp.Rdata")
save(samp_all_lowMig_highSamp_equal, samp_all_lowMig_highSamp_prop, file="alleles_capt_lowMig_highSamp.Rdata")
save(samp_all_lowMig_lowSamp_equal, samp_all_lowMig_lowSamp_prop, file="alleles_capt_lowMig_lowSamp.Rdata")
#save total alleles present
save(total_alleles_highMig, total_alleles_lowMig, file="total_alleles.Rdata")
samp_all_highMig_highSamp_equal
