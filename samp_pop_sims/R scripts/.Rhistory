library(ggpubr)
library(ggsignif)
library(tidyr)
#Flags
#File conversion flag
#This flag is set to true when simulations have been run and files have been converted already
#There is no need to re-convert the files once they have been converted once
#if you want to re-run conversions, set this to FALSE
imported = TRUE
#set working directory
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_engelmannii'
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(imported == FALSE) {
import_arp2gen_files(mydir, ".arp$")
}
#pre-defining arrays to store results in loops below
#arrays dimensions are [1x100]
#the 100 represents simulation replicates
#the 1 represents 1 case study species with no varying parameters
results_q_engelmannii_equal = array(0, dim = c(1, 100))
results_q_engelmannii_prop = array(0, dim = c(1, 100))
#array to store total alleles for each replicate
total_alleles_q_engelmannii = array(0, dim = c(1, 100))
#***********************************************************************
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
##selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
#defining sample sizes for equal sampling and proportional sampling
sample_size_equal = c(50,50,50,50) #low intensity - if high, double values
sample_size_prop = as.numeric(table(temp_genind@pop)*0.01)#low intensity - if high, double values
sample_size_prop = ceiling(sample_size_prop) #round up decimal values to whole numbers
#defining 'rows' or individuals to sample from
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]))
#calculating and saving the raw alleles captured by each strategy into a variable
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#calculating the total alleles present
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured by each strategy
#ie., alleles sampled/total = proportion of alleles captured
results_q_engelmannii_equal[1,i] = sample_n_alleles_equal/total_alleles
results_q_engelmannii_prop[1,i] = sample_n_alleles_prop/total_alleles
#saving the total alleles present
total_alleles_q_engelmannii[1,i] = total_alleles
}
#**************************************************************************************
#Preparing data for graphics
#converting results from matrices to data frames
results_q_engelmannii_equal = as.data.frame(results_q_engelmannii_equal)
results_q_engelmannii_prop = as.data.frame(results_q_engelmannii_prop)
#converting data to long format
results_q_engelmannii_equal = gather(results_q_engelmannii_equal, replicate, prop_all)
results_q_engelmannii_prop = gather(results_q_engelmannii_prop, replicate, prop_all)
#variables to keep track of the strategy used -- equal or proportional
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
#defining a column to keep track of the strategy variable
results_q_engelmannii_equal$strategy = equal_strategy
results_q_engelmannii_prop$strategy = prop_strategy
#combining both dataframes (holding equal and proportional data) into one large dataframe for plotting
combined_q_engelmannii = rbind(results_q_engelmannii_equal, results_q_engelmannii_prop)
#saving data to Rdata files
setwd(mydir)
save(results_q_engelmannii_equal, results_q_engelmannii_prop, file="results_q_engelmannii.Rdata")
save(combined_q_engelmannii, file="combined_results_q_engelmannii.Rdata")
#****************************************************************************************
#Creating Q. engelmannii graph using ggplot 2
#Note: this is only the results of the Q. engelmannii case study
p = ggplot(combined_q_engelmannii, aes(x=strategy, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. engelmannii") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw() +
theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#loading in data that was saved from other case study R scripts
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_acerifolia'
setwd(mydir)
load("combined_results_q_acerifolia.Rdata")
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_engelmannii'
setwd(mydir)
load("combined_results_q_engelmannii.Rdata")
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_oglethorpensis'
setwd(mydir)
load("combined_results_q_oglethorpensis.Rdata")
#preparing data by naming a column indicating each case study species
#repeating 200 times for each species since there are 100 simulation replicates that were analzyed for equal and proportional (200 entries total)
q_acer = rep("Q. acerifolia", 200)
combined_q_acerifolia$species = q_acer
q_engel = rep("Q. engelmannii", 200)
combined_q_engelmannii$species = q_engel
q_ogle = rep("Q. oglethorpensis", 200)
combined_q_oglethorpensis$species = q_ogle
#combining all results into one larger dataframe for plotting/comparison on one graph
all_case_studies = rbind(combined_q_acerifolia, combined_q_engelmannii, combined_q_oglethorpensis)
#Creating graph using ggplot2 with all case study species compared together
#x-axis: species, y-axis: proportion of alleles captured
#the color of the boxplot indicates which strategy was used
p = ggplot(all_case_studies, aes(x=species, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) + #this line shows stars *** for significant values on the plot
ggtitle("Case study species") + #labels for plot
xlab("Species") +
ylab("Proportion of alleles captured") +
ylim(0.8,1.02) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) + #design elements
theme_bw() #+
#theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #creating/displaying the plot and changing font size to be larger
#Creating graph using ggplot2 with all case study species compared together
#x-axis: species, y-axis: proportion of alleles captured
#the color of the boxplot indicates which strategy was used
p = ggplot(all_case_studies, aes(x=species, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) + #this line shows stars *** for significant values on the plot
ggtitle("Case study species") + #labels for plot
xlab("Species") +
ylab("Proportion of alleles captured") +
ylim(0.7,1.02) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) + #design elements
theme_bw() #+
#theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #creating/displaying the plot and changing font size to be larger
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#set working directory and load in data
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims\\R scripts")
load("results_highMig_highSamp.Rdata")
load("results_lowMig_highSamp.Rdata")
load("results_highMig_lowSamp.Rdata")
load("results_lowMig_lowSamp.Rdata")
load("combined_dataframes.Rdata")
#list of combinations
#combination sub-folder directories
combinations = c("\\highMig_highSamp", "\\lowMig_highSamp", "\\highMig_lowsamp", "\\lowMig_lowSamp")
#list of scenarios
#simulation sub-folder directories
scenarios = c("\\scen1",
"\\scen2",
"\\scen3",
"\\scen4",
"\\scen5",
"\\scen6",
"\\scen7",
"\\scen8",
"\\scen9")
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.80,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.75,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.78,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.79,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#1: High migration high sampling plot
#scenario on x-axis, proportion of alleles on y-axis
#color of boxplots indicates which strategy was used
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) + #this code gives the stars *** indicating significance values
ggtitle("High migration high sampling intensity") + # this and next three lines are titles and labels
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.80,1) + #defining limits for the y-axis
scale_fill_brewer() + #this and next line are design elements
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #this line will display/create the plot, along with making the font larger
#2: Low migration high sampling plot
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99, 0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#2: Low migration high sampling plot
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99, 0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.70,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#2: Low migration high sampling plot
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99, 0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.80,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#2: Low migration high sampling plot
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99, 0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.82,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#3: High migration low sampling plot
p = ggplot(combined_highMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.94,0.94,0.95,0.96,0.96)) +
ggtitle("High migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#3: High migration low sampling plot
p = ggplot(combined_highMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.94,0.94,0.95,0.96,0.96)) +
ggtitle("High migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.70,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#3: High migration low sampling plot
p = ggplot(combined_highMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.94,0.94,0.95,0.96,0.96)) +
ggtitle("High migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.72,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#3: High migration low sampling plot
p = ggplot(combined_highMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.94,0.94,0.95,0.96,0.96)) +
ggtitle("High migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.70,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#4: Low migration low sampling plot
p = ggplot(combined_lowMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.97,0.975,0.975,0.975)) +
ggtitle("Low migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#4: Low migration low sampling plot
p = ggplot(combined_lowMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.97,0.975,0.975,0.975)) +
ggtitle("Low migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.70,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#4: Low migration low sampling plot
p = ggplot(combined_lowMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.97,0.975,0.975,0.975)) +
ggtitle("Low migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.75,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
################################################################################################################
#STATISTICAL ANALYSES
#Wilcoxon rank sums test
#vector to store the p-values of each test for each combination
p_val_highMig_highSamp = c(rep(0, 9))
p_val_lowMig_highSamp = c(rep(0, 9))
p_val_highMig_lowSamp = c(rep(0, 9))
p_val_lowMig_lowSamp = c(rep(0, 9))
#loop to calculate Wilcox tests and save p-values in vectors
for(i in 1:length(combinations)) {
for(j in 1:length(scenarios)) {
if(i == 1) { #high mig high samp
x_var = results_highMig_highSamp_prop[j,]
y_var = results_highMig_highSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_highMig_highSamp[j] = test_result$p.value
} else if(i == 2) { #low mig high samp
x_var = results_lowMig_highSamp_prop[j,]
y_var = results_lowMig_highSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_lowMig_highSamp[j] = test_result$p.value
} else if(i == 3) { #high mig low samp
x_var = results_highMig_lowSamp_prop[j,]
y_var = results_highMig_lowSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_highMig_lowSamp[j] = test_result$p.value
} else { #low mig low samp
x_var = results_lowMig_lowSamp_prop[j,]
y_var = results_lowMig_lowSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_lowMig_lowSamp[j] = test_result$p.value
}
}
}
#merging all vectors together into a matrix combining all p values across combinations
p_value_matrix = matrix(0, nrow = 4, ncol = 9)
p_value_matrix[1,] = p_val_highMig_highSamp
p_value_matrix[2,] = p_val_lowMig_highSamp
p_value_matrix[3,] = p_val_highMig_lowSamp
p_value_matrix[4,] = p_val_lowMig_lowSamp
#naming rows and columns for matrix and printing results
rownames(p_value_matrix) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
colnames(p_value_matrix) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
unadjust = matrix(round(p_value_matrix, 5), nrow=4, ncol=9)
p_value_matrix_invert = matrix(0, nrow = 9, ncol = 4)
p_value_matrix_invert = matrix(0, nrow = 9, ncol = 4)
p_value_matrix_invert[,1] = p_val_highMig_highSamp
p_value_matrix_invert[,2] = p_val_lowMig_highSamp
p_value_matrix_invert[,3] = p_val_highMig_lowSamp
p_value_matrix_invert[,4] = p_val_lowMig_lowSamp
rownames(p_value_matrix_invert) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
colnames(p_value_matrix_invert) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
p_value_matrix_invert
unadjust = p_value_matrix_invert
unadjust
#p adjustment methods
bh_p = matrix(round(p.adjust(p_value_matrix_invert, method = "BH"), 5), nrow=4, ncol=9)
by_p = matrix(round(p.adjust(p_value_matrix_invert, method = "BY"), 5), nrow=4, ncol=9)
bonferroni_p = matrix(round(p.adjust(p_value_matrix_invert, method = "bonferroni"), 5), nrow=4, ncol=9)
#exporting matrices to Excel for tables
write.csv(unadjust, "unadjust.csv")
write.csv(bh_p, "bh_p_values.csv")
#p adjustment methods
bh_p = matrix(round(p.adjust(p_value_matrix_invert, method = "BH"), 5), nrow=4, ncol=9)
write.csv(bh_p, "bh_p_values.csv")
rownames(p_value_matrix_invert) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
colnames(p_value_matrix_invert) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
signif(p_value_matrix_invert, 3)
unadjust = p_value_matrix_invert
#exporting matrices to Excel for tables
write.csv(unadjust, "unadjust.csv")
rownames(p_value_matrix_invert) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
colnames(p_value_matrix_invert) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
unadjust = signif(p_value_matrix_invert, 3)
#exporting matrices to Excel for tables
write.csv(unadjust, "unadjust.csv")
#p adjustment methods
bh_p = matrix(round(p.adjust(p_value_matrix_invert, method = "BH"), 5), nrow=4, ncol=9)
write.csv(bh_p, "bh_p_values_invert.csv")
#p adjustment methods
bh_p = matrix(round(p.adjust(p_value_matrix_invert, method = "BH"), 5), nrow=9, ncol=4)
write.csv(bh_p, "bh_p_values_invert.csv")
