plot(S~freq)
freq<-seq(0.05,0.001,by=-.001)
source('~/.active-rstudio-document', echo=TRUE)
plot(p, s)
source('~/.active-rstudio-document', echo=TRUE)
p = c(5, 10, 15, 30, 50, 100, 1000, 10000)
for(i in 1:length(p)) {
S[i] = -3/log(1-p)
}
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
for(i in 1:length(p)) {
S[i] = -3/log(1-p)
}
plot(p~S)
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
for(i in 1:length(p)) {
S[i] = -3/log(1-p)
}
source('~/.active-rstudio-document', echo=TRUE)
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
s = (0, length(p))
s = rep(0, length(p))
for(i in 1:length(p)) {
S[i] = -3/(log(1-p))
}
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
s = rep(0, length(p))
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i]))
}
plot(p~S)
freq<-seq(0.05,0.001,by=-.001)
S<-rep(0,length(freq))
for (p in 1:length(freq)) {
S[p]<-3/(log(1-freq[p]))
}
plot(S~freq)
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001) #defining frequencies
s = rep(0, length(p))#declaring S
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i]))
}
plot(p~S)
plot(S~p)
source('~/.active-rstudio-document', echo=TRUE)
p = c(0.05, 0.025, 0.0125, 0.00625, 0.00313, 0.00156, 0.000781, 0.000391, 0.000195) #defining frequencies
s = rep(0, length(p))#declaring S
p = c(0.05, 0.025, 0.0125, 0.00625, 0.00313, 0.00156, 0.000781, 0.000391, 0.000195) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S
p
p = <-seq(0.05,0.001,by=-.001) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
p <-seq(0.05,0.001,by=-.001) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
plot(S~p)
plot(S, p, r)
plot(S)
plot(S~p)
plot(S~r)
plot(S~p)
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
warnings()
source('~/Research/Morton REU/equation2_brown.R', echo=TRUE)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
p
s
source('~/Research/Morton REU/equation3_brown.R', echo=TRUE)
r
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
plot(S~p)
s
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
s
table1 = table(c(p, r, S))
table1
data = data.frame(p, r. S)
data = data.frame(p, r, S)
for(i in 1:6){
print(s[i])
}
1
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
for(i in 1:6){
print(S[i])
}
#make a table to display values
to.data.frame(p, r, S)
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(i in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i,j] + (1.645*sqrt(r[i,j])) + 0.5)/(p[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
library(diveRsity)
library(adegenet)
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
files
files[[1]]
for(i in 1:length(files)) {
gen_files = list(arp2gen(files[[i]]))
}
files
hello_function()
hello_function = function() {
print("Hello world!")
}
hello_function()
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
int x = 2;
X
#library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#set working directory and load in data
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\samp_pop_sims\\R scripts")
load("results_highMig_highSamp.Rdata")
load("results_lowMig_highSamp.Rdata")
load("results_highMig_lowSamp.Rdata")
load("results_lowMig_lowSamp.Rdata")
load("combined_dataframes.Rdata")
#list of combinations
#combination sub-folder directories
combinations = c("\\highMig_highSamp", "\\lowMig_highSamp", "\\highMig_lowsamp", "\\lowMig_lowSamp")
#list of scenarios
#simulation sub-folder directories
scenarios = c("\\scen1",
"\\scen2",
"\\scen3",
"\\scen4",
"\\scen5",
"\\scen6",
"\\scen7",
"\\scen8",
"\\scen9")
################################################################################################################
#STATISTICAL ANALYSES
#Wilcoxon rank sums test
#vector to store the p-values of each test for each combination
p_val_highMig_highSamp = c(rep(0, 9))
p_val_lowMig_highSamp = c(rep(0, 9))
p_val_highMig_lowSamp = c(rep(0, 9))
p_val_lowMig_lowSamp = c(rep(0, 9))
#loop to calculate Wilcox tests and save p-values in vectors
for(i in 1:length(combinations)) {
for(j in 1:length(scenarios)) {
if(i == 1) { #high mig high samp
x_var = results_highMig_highSamp_prop[j,]
y_var = results_highMig_highSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_highMig_highSamp[j] = test_result$p.value
} else if(i == 2) { #low mig high samp
x_var = results_lowMig_highSamp_prop[j,]
y_var = results_lowMig_highSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_lowMig_highSamp[j] = test_result$p.value
} else if(i == 3) { #high mig low samp
x_var = results_highMig_lowSamp_prop[j,]
y_var = results_highMig_lowSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_highMig_lowSamp[j] = test_result$p.value
} else { #low mig low samp
x_var = results_lowMig_lowSamp_prop[j,]
y_var = results_lowMig_lowSamp_equal[j,]
test_result = wilcox.test(x_var, y_var)
p_val_lowMig_lowSamp[j] = test_result$p.value
}
}
}
#merging all vectors together into a matrix combining all p values across combinations
p_value_matrix = matrix(0, nrow = 4, ncol = 9)
p_value_matrix[1,] = p_val_highMig_highSamp
p_value_matrix[2,] = p_val_lowMig_highSamp
p_value_matrix[3,] = p_val_highMig_lowSamp
p_value_matrix[4,] = p_val_lowMig_lowSamp
#naming rows and columns for matrix and printing results
rownames(p_value_matrix) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
colnames(p_value_matrix) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
matrix(round(p_value_matrix, 5), nrow=4, ncol=9)
table(p_value_matrix)
#p adjustment methods
matrix(round(p.adjust(p_value_matrix, method = "BH"), 5), nrow=4, ncol=9)
matrix(round(p.adjust(p_value_matrix, method = "bonferroni"), 5), nrow=4, ncol=9)
write.csv(p_value_matrix, "p_val_unadjust.csv")
write.csv(bh_p, "bh_p_values.csv")
#p adjustment methods
bh_p = matrix(round(p.adjust(p_value_matrix, method = "BH"), 5), nrow=4, ncol=9)
by_p = matrix(round(p.adjust(p_value_matrix, method = "BY"), 5), nrow=4, ncol=9)
bonferroni_p = matrix(round(p.adjust(p_value_matrix, method = "bonferroni"), 5), nrow=4, ncol=9)
write.csv(p_value_matrix, "p_val_unadjust.csv")
write.csv(bh_p, "bh_p_values.csv")
write.csv(by_p, "by_p_values.csv")
write.csv(bonferroni_p, "bonferroni_p_values.csv")
#merging all vectors together into a matrix combining all p values across combinations
p_value_matrix = matrix(0, nrow = 4, ncol = 9)
p_value_matrix[1,] = p_val_highMig_highSamp
p_value_matrix[2,] = p_val_lowMig_highSamp
p_value_matrix[3,] = p_val_highMig_lowSamp
p_value_matrix[4,] = p_val_lowMig_lowSamp
#naming rows and columns for matrix and printing results
rownames(p_value_matrix) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
colnames(p_value_matrix) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
matrix(round(p_value_matrix, 5), nrow=4, ncol=9)
#naming rows and columns for matrix and printing results
rownames(p_value_matrix) = c("highMig_highSamp", "lowMig_highSamp", "highMig_lowSamp", "lowMig_lowSamp")
colnames(p_value_matrix) = c("scenario 1", "scenario 2", "scenario 3", "scenario 4", "scenario 5", "scenario 6", "scenario 7", "scenario 8", "scenario 9")
unadjust = matrix(round(p_value_matrix, 5), nrow=4, ncol=9)
write.csv(unadjust, "p_val_unadjust.csv")
write.csv(unadjust, "unadjust.csv")
