r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
warnings()
source('~/Research/Morton REU/equation2_brown.R', echo=TRUE)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
p
s
source('~/Research/Morton REU/equation3_brown.R', echo=TRUE)
r
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
plot(S~p)
s
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
s
table1 = table(c(p, r, S))
table1
data = data.frame(p, r. S)
data = data.frame(p, r, S)
for(i in 1:6){
print(s[i])
}
1
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
for(i in 1:6){
print(S[i])
}
#make a table to display values
to.data.frame(p, r, S)
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(i in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i,j] + (1.645*sqrt(r[i,j])) + 0.5)/(p[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
setwd('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2')
library(diveRsity)
library(adegenet)
#results vector
testmicro_vector = c(0:10)
testmicro_vector
#results vector
testmicro_vector = c(0:9)
testmicro_vector
list.files(pattern = ".arp$")
#creating a list to store all file names
list.filenames = list.files(pattern = ".arp$")
list.filenames
#create an empty list to store data read in from files
list.data = list()
list.data[i] = arp2gen(list.filenames[i])
list.data
#loop to read in data
for(i in 1:length(list.filenames)){
list.data[[i]] = arp2gen(list.filenames[i])
}
#adding names to data
names(list.data) = list.filenames
list.data
#attempting to make a function out of it
import.arp2gen.files = function(mypath, mypattern, ...) {
tmp.list.1 = list.files(mypath, pattern = mypatter)
tmp.list.2 = list(length = length(tmp.list.1))
for(i in 1:length(tmp.list.1)){tmp.list.2[[i]]=arp2gen(tmp.list.1[i], ...)}
names(tmp.list.2)=tmp.list.1
tmp.list.2
}
testmicro2_import = import.arp2gen.files('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2', ".arp$", sep=",")
#attempting to make a function out of it
import.arp2gen.files = function(mypath, mypattern, ...) {
tmp.list.1 = list.files(mypath, pattern = mypattern)
tmp.list.2 = list(length = length(tmp.list.1))
for(i in 1:length(tmp.list.1)){tmp.list.2[[i]]=arp2gen(tmp.list.1[i], ...)}
names(tmp.list.2)=tmp.list.1
tmp.list.2
}
testmicro2_import = import.arp2gen.files('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2', ".arp$", sep=",")
testmicro2_import = import.arp2gen.files('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2', ".arp$")
#attempting to make a function out of it
import.arp2gen.files = function(mypath, mypattern, ...) {
tmp.list.1 = list.files(mypath, pattern = mypattern)
tmp.list.2 = list(length = length(tmp.list.1))
for(i in 1:length(tmp.list.1)){tmp.list.2[[i]]=arp2gen(tmp.list.1[i], ...)}
names(tmp.list.2)=tmp.list.1
tmp.list.2
}
testmicro2_import = import.arp2gen.files('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2', ".arp$")
names(tmp.list.2) = tmp.list.1
#attempting to make a function out of it
import.arp2gen.files = function(mypath, mypattern, ...) {
tmp.list.1 = list.files(mypath, pattern = mypattern)
tmp.list.2 = list(length = length(tmp.list.1))
for(i in 1:length(tmp.list.1)){tmp.list.2[[i]]=arp2gen(tmp.list.1[i], ...)}
names(tmp.list.2) = tmp.list.1
tmp.list.2
}
testmicro2_import = import.arp2gen.files('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2', ".arp$")
testmicro2_import = import.arp2gen.files("C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2", ".arp$", sep = " ")
testmicro2_import = import.arp2gen.files("C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2", ".arp$")
setwd('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2')
library(diveRsity)
library(adegenet)
#lists all files in current directory with .arp extension
list.files(pattern = ".arp$")
#creating a list to store all file names
list.filenames = list.files(pattern = ".arp$")
list.filenames
#create an empty list to store data read in from files
list.data = list()
#loop to read in data
for(i in 1:length(list.filenames)){
list.data[[i]] = arp2gen(list.filenames[i])
}
#adding names to data
names(list.data) = list.filenames
list.data
testmicro2_genepop = list.data
#genepop to genind
#another loop to convert?
testmicro2_genind = list()
list.files(pattern = ".gen$")
list.files(pattern = ".gen$")
list.filenames.gen = list.files(pattern = ".gen$")
#loop to read in .gen files to form genind object
for(i in 1:length(list.filenames.gen)){
testmicro2_genind[[i]] = read.genepop(list.filenames.gen[i])
}
testmicro2_genind[[i]] = read.genepop(list.filenames.gen[i], ncode = 3)
setwd('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2')
library(diveRsity)
library(adegenet)
#lists all files in current directory with .arp extension
list.files(pattern = ".arp$")
#creating a list to store all file names
list.filenames = list.files(pattern = ".arp$")
#create an empty list to store data read in from files
list.data = list()
#loop to read in data
for(i in 1:length(list.filenames)){
list.data[[i]] = arp2gen(list.filenames[i])
}
#adding names to data
names(list.data) = list.filenames
list.data
#renaming - genepop format
testmicro2_genepop = list.data
#adding names to data
#names(list.data) = list.filenames
#list.data
#renaming - genepop format
testmicro2_genepop = list.data
#*********************************************
#genepop to genind
#another loop to convert?
#empty list to store
testmicro2_genind = list()
list.files(pattern = ".gen$")
list.filenames.gen = list.files(pattern = ".gen$")
#loop to read in .gen files to form genind object
for(i in 1:length(list.filenames.gen)){
testmicro2_genind[[i]] = read.genepop(list.filenames.gen[i], ncode = 3)
}
setwd('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\testmicro2')
library(diveRsity)
library(adegenet)
setwd('C:\\Users\\kayle\\Documents\\Morton REU\\Morton-REU-master\\Simulations\\simcoal\\micro_example')
library(diveRsity)
library(adegenet)
#lists all files in current directory with .arp extension
list.files(pattern = ".arp$")
#creating a list to store all file names
list.filenames = list.files(pattern = ".arp$")
#create an empty list to store data read in from files
list.data = list()
#loop to read in data
for(i in 1:length(list.filenames)){
list.data[[i]] = arp2gen(list.filenames[i])
}
#adding names to data
#names(list.data) = list.filenames
#list.data
#renaming - genepop format
testmicro2_genepop = list.data
library(diveRsity)
library(adegenet)
##try to load in arlequin file and then convert it
setwd('C:\\Users\\kayle\\Downloads')
##convert arlequin file to a genepop format
butternut_genepop <- arp2gen("butternut_arl.arp")
##now read in gene pop file into genind for adegenet
butternut_genind <- read.genepop("butternut_arl.gen", ncode = 3)
#examining the object
butternut_genind
temp = inbreeding(butternut)
temp = inbreeding(butternut_genind)
Fbar = sapply(temp, mean)
plot(Fbar)
hist(Fbar)
#histogram of Fbar
hist(Fbar, main="Average inbreeding")
which(Fbar > 0.6)
F = inbreeding(butternut_genind, res.type="function")[which(Fbar>0.6)]
F
F_ind = inbreeding(butternut_genind, res.type="function")[which(Fbar>0.6)]
F_ind
plot(F_ind, main=paste("Inbreeding",names(F_ind)),
xlab="Inbreeding (F_ind)", ylab="Probability density")
which(Fbar > 0.6)
plot(F_ind$0118, main=paste("Inbreeding",names(F_ind)),
xlab="Inbreeding (F_ind)", ylab="Probability density")
plot(F_ind$"0118", main=paste("Inbreeding",names(F_ind)),
xlab="Inbreeding (F_ind)", ylab="Probability density")
plot(F_ind$"0118", main="Inbreeding",
xlab="Inbreeding (F_ind)", ylab="Probability density")
setwd('C:\Users\kayle\Documents\Morton-REU\practice\Simulations\simcoal2/example_file')
setwd('C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file')
library(diveRsity)
library(adegenet)
#creating a list to store all file names
list.filenames = list.files(pattern = ".arp$")
#create an empty list to store data read in from files
list.data = list()
#loop to read in data
for(i in 1:length(list.filenames)){
list.data[[i]] = arp2gen(list.filenames[i])
}
#creating a list to store all file names
list.filenames = list.files(pattern = ".arp$")
list.filenames
#create an empty list to store data read in from files
list.data = list()
#loop to read in data
for(i in 1:length(list.filenames)){
list.data[[i]] = arp2gen(list.filenames[i])
}
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example.data = list()
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example.data = list()
#loop to read in data
for(i in 1:length(example_files)){
list.data[[i]] = arp2gen(example_files[i])
}
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example.data = list()
#create an empty list to store data read in from files
example_data = list()
#loop to read in data
for(i in 1:length(example_files)){
example_data[[i]] = arp2gen(example_files[i])
}
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
example_data
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
example_data[[i]] = arp2gen(example_files[i], ...)
example_data[[i]] = arp2gen(example_files[i])
example_Data
example_data
example_data[1]
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
C
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
#loop to read in data
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen(example_files[i])
}
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\forest_extended")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\forest_extended")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
forest_files = list.files(pattern = ".arp$")
forest_files
#create an empty list to store data read in from files
forest_data = list()
#loop to read in data
for(i in 1:length(forest_files)) {
forest_data[[i]] = arp2gen(forest_files[i])
}
