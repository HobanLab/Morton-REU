plot(S~freq)
freq<-seq(0.05,0.001,by=-.001)
source('~/.active-rstudio-document', echo=TRUE)
plot(p, s)
source('~/.active-rstudio-document', echo=TRUE)
p = c(5, 10, 15, 30, 50, 100, 1000, 10000)
for(i in 1:length(p)) {
S[i] = -3/log(1-p)
}
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
for(i in 1:length(p)) {
S[i] = -3/log(1-p)
}
plot(p~S)
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
for(i in 1:length(p)) {
S[i] = -3/log(1-p)
}
source('~/.active-rstudio-document', echo=TRUE)
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
s = (0, length(p))
s = rep(0, length(p))
for(i in 1:length(p)) {
S[i] = -3/(log(1-p))
}
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001)
s = rep(0, length(p))
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i]))
}
plot(p~S)
freq<-seq(0.05,0.001,by=-.001)
S<-rep(0,length(freq))
for (p in 1:length(freq)) {
S[p]<-3/(log(1-freq[p]))
}
plot(S~freq)
p = c(0.05, 0.01, 0.001, 0.0001, 0.00001) #defining frequencies
s = rep(0, length(p))#declaring S
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i]))
}
plot(p~S)
plot(S~p)
source('~/.active-rstudio-document', echo=TRUE)
p = c(0.05, 0.025, 0.0125, 0.00625, 0.00313, 0.00156, 0.000781, 0.000391, 0.000195) #defining frequencies
s = rep(0, length(p))#declaring S
p = c(0.05, 0.025, 0.0125, 0.00625, 0.00313, 0.00156, 0.000781, 0.000391, 0.000195) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S
p
p = <-seq(0.05,0.001,by=-.001) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
p <-seq(0.05,0.001,by=-.001) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
plot(S~p)
plot(S, p, r)
plot(S)
plot(S~p)
plot(S~r)
plot(S~p)
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
warnings()
source('~/Research/Morton REU/equation2_brown.R', echo=TRUE)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
p
s
source('~/Research/Morton REU/equation3_brown.R', echo=TRUE)
r
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
plot(S~p)
s
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
s
table1 = table(c(p, r, S))
table1
data = data.frame(p, r. S)
data = data.frame(p, r, S)
for(i in 1:6){
print(s[i])
}
1
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
for(i in 1:6){
print(S[i])
}
#make a table to display values
to.data.frame(p, r, S)
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(i in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i,j] + (1.645*sqrt(r[i,j])) + 0.5)/(p[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
setwd('C:\\Users\\kayle\\Documents\\Research\\Morton REU\\R')
library(tidyr)
library(adgenet)
library(poppr)
library(hierfst)
library(diveRsity)
install.packages(c("diveRsity", "poppr", "tidyr"))
setwd('C:\\Users\\kayle\\Documents\\Research\\Morton REU\\R')
library(tidyr)
library(adgenet)
library(poppr)
library(hierfst)
library(diveRsity)
library(tidyr)
library(adgenet)
library(poppr)
library(hierfst)
library(diveRsity)
install.packages("hierfstat")
library(hierfstat)
library(adegenet)
library(hierfstat)
library(diveRsity)
library(adegenet)
