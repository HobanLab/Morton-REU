for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
plot(S~p)
s
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
s
table1 = table(c(p, r, S))
table1
data = data.frame(p, r. S)
data = data.frame(p, r, S)
for(i in 1:6){
print(s[i])
}
1
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
for(i in 1:6){
print(S[i])
}
#make a table to display values
to.data.frame(p, r, S)
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(i in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i,j] + (1.645*sqrt(r[i,j])) + 0.5)/(p[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
library(diveRsity)
library(adegenet)
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
files
files[[1]]
for(i in 1:length(files)) {
gen_files = list(arp2gen(files[[i]]))
}
files
hello_function()
hello_function = function() {
print("Hello world!")
}
hello_function()
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
int x = 2;
X
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#Set working directory
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_studies\\Simulations\\q_acerifolia'
setwd(mydir)
#Set working directory
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_acerifolia'
setwd(mydir)
#pre-defining arrays to store results in loops below
results_q_acerifolia_equal = array(0, dim = c(1, 100))
results_q_acerifolia_prop = array(0, dim = c(1, 100))
#pre-defining array to store total alleles present for each replicate
total_alleles_q_acerifolia = array(0, dim = c(1, 100))
#***********************************************************************
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
#***********************************************************************
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
#defining sample sizes for equal sampling and proportional sampling
sample_size_equal = c(16,16,16,16) #low intensity - if high, double values
sample_size_prop = as.numeric(table(temp_genind@pop)*0.12) #low intensity - if high, double values
sample_size_prop = ceiling(sample_size_prop) #round up decimal values to whole numbers (we can't sample a fraction of an individual :)
#defining 'rows' or individuals to sample from
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]))
#calculating and saving the raw alleles captured by each strategy into a variable
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#calculating the total alleles present
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured by each strategy
#ie., alleles sampled/total = proportion of alleles captured
results_q_acerifolia_equal[1,i] = sample_n_alleles_equal/total_alleles
results_q_acerifolia_prop[1,i] = sample_n_alleles_prop/total_alleles
#saving total alleles captured
total_alleles_q_acerifolia[1,i] = total_alleles
}
#**************************************************************************************
#Preparing data for graphics
#converting results from matrices to data frames
results_q_acerifolia_equal = as.data.frame(results_q_acerifolia_equal)
results_q_acerifolia_prop = as.data.frame(results_q_acerifolia_prop)
#converting data to long format
results_q_acerifolia_equal = gather(results_q_acerifolia_equal, replicate, prop_all)
results_q_acerifolia_prop = gather(results_q_acerifolia_prop, replicate, prop_all)
#variables to keep track of the strategy used -- equal or proportional
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
#defining a column to keep track of the strategy variable
results_q_acerifolia_equal$strategy = equal_strategy
results_q_acerifolia_prop$strategy = prop_strategy
#combining both dataframes (holding equal and proportional data) into one large dataframe for plotting
combined_q_acerifolia = rbind(results_q_acerifolia_equal, results_q_acerifolia_prop)
#saving results to Rdata files
setwd(mydir)
save(results_q_acerifolia_equal, results_q_acerifolia_prop, file="results_q_acerifolia.Rdata")
save(combined_q_acerifolia, file="combined_results_q_acerifolia.Rdata")
#****************************************************************************************
#Creating Q. acerifolia graph using ggplot2
#Note this graph only displays results of Q. acerifolia
p = ggplot(combined_q_acerifolia, aes(x=strategy, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. acerifolia") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw() +
theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#set working directory
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_engelmannii'
setwd(mydir)
#pre-defining arrays to store results from loop below
results_q_engelmannii_equal = array(0, dim = c(1, 100))
results_q_engelmannii_prop = array(0, dim = c(1, 100))
#array to store total alleles for each replicate
total_alleles_q_engelmannii = array(0, dim = c(1, 100))
#***********************************************************************
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
##selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
#defining sample sizes for equal sampling and proportional sampling
sample_size_equal = c(100,100,100,100) #low intensity - if high, double values
sample_size_prop = as.numeric(table(temp_genind@pop)*0.02)#low intensity - if high, double values
sample_size_prop = ceiling(sample_size_prop) #round up decimal values to whole numbers
#defining 'rows' or individuals to sample from
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]))
#calculating and saving the raw alleles captured by each strategy into a variable
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#calculating the total alleles present
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured by each strategy
#ie., alleles sampled/total = proportion of alleles captured
results_q_engelmannii_equal[1,i] = sample_n_alleles_equal/total_alleles
results_q_engelmannii_prop[1,i] = sample_n_alleles_prop/total_alleles
#saving the total alleles present
total_alleles_q_engelmannii[1,i] = total_alleles
}
#**************************************************************************************
#Preparing data for graphics
#converting results from matrices to data frames
results_q_engelmannii_equal = as.data.frame(results_q_engelmannii_equal)
results_q_engelmannii_prop = as.data.frame(results_q_engelmannii_prop)
#converting data to long format
results_q_engelmannii_equal = gather(results_q_engelmannii_equal, replicate, prop_all)
results_q_engelmannii_prop = gather(results_q_engelmannii_prop, replicate, prop_all)
#variables to keep track of the strategy used -- equal or proportional
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
#defining a column to keep track of the strategy variable
results_q_engelmannii_equal$strategy = equal_strategy
results_q_engelmannii_prop$strategy = prop_strategy
#combining both dataframes (holding equal and proportional data) into one large dataframe for plotting
combined_q_engelmannii = rbind(results_q_engelmannii_equal, results_q_engelmannii_prop)
#saving data to Rdata files
setwd(mydir)
save(results_q_engelmannii_equal, results_q_engelmannii_prop, file="results_q_engelmannii.Rdata")
save(combined_q_engelmannii, file="combined_results_q_engelmannii.Rdata")
#****************************************************************************************
#Creating Q. engelmannii graph using ggplot 2
#Note: this is only the results of the Q. engelmannii case study
p = ggplot(combined_q_engelmannii, aes(x=strategy, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. engelmannii") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw() +
theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#set working directory
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_oglethorpensis'
setwd(mydir)
##pre-defining arrays to store results from loop below
results_q_oglethorpensis_equal = array(0, dim = c(1, 100))
results_q_oglethorpensis_prop = array(0, dim = c(1, 100))
#array to store total alleles for each replicate
total_alleles_q_oglethorpensis = array(0, dim = c(1, 100))
#***********************************************************************
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 5 values since we have 5 populations
first_ind = first_ind[1:5]
#defining sample sizes for equal sampling and proportional sampling
sample_size_equal = c(20,20,20,20,20) #low intensity - if high, double values
sample_size_prop = as.numeric(table(temp_genind@pop)*0.10)#low intensity - if high, double values
sample_size_prop = ceiling(sample_size_prop) #round up decimal values to whole numbers
#defining 'rows' or individuals to sample from
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]), sample(first_ind[5]:last_ind[5], sample_size_equal[5]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]), sample(first_ind[5]:last_ind[5], sample_size_prop[5]))
#calculating and saving the raw alleles captured by each strategy into a variable
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#saving the total alleles present
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured by each strategy
results_q_oglethorpensis_equal[1,i] = sample_n_alleles_equal/total_alleles
results_q_oglethorpensis_prop[1,i] = sample_n_alleles_prop/total_alleles
#saving the total alleles present
total_alleles_q_oglethorpensis[1,i] = total_alleles
}
#**************************************************************************************
#Preparing data for graphics
#converting results from matrices to data frames
results_q_oglethorpensis_equal = as.data.frame(results_q_oglethorpensis_equal)
results_q_oglethorpensis_prop = as.data.frame(results_q_oglethorpensis_prop)
#converting to long format
results_q_oglethorpensis_equal = gather(results_q_oglethorpensis_equal, replicate, prop_all)
results_q_oglethorpensis_prop = gather(results_q_oglethorpensis_prop, replicate, prop_all)
#variables to keep track of the strategy used -- equal or proportional
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
#defining a column to keep track of the strategy variable
results_q_oglethorpensis_equal$strategy = equal_strategy
results_q_oglethorpensis_prop$strategy = prop_strategy
#combining both dataframes (holding equal and proportional data) into one large dataframe for plotting
combined_q_oglethorpensis = rbind(results_q_oglethorpensis_equal, results_q_oglethorpensis_prop)
#saving data to Rdata files
setwd(mydir)
save(results_q_oglethorpensis_equal, results_q_oglethorpensis_prop, file="results_q_oglethorpensis.Rdata")
save(combined_q_oglethorpensis, file="combined_results_q_oglethorpensis.Rdata")
#****************************************************************************************
#Creating graph for Q. oglethorpensis
#Note: this graph only shows results for Q. oglethorpensis
p = ggplot(combined_q_oglethorpensis, aes(x=strategy, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. oglethorpensis") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw() +
theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#loading in data that was saved from other case study R scripts
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_acerifolia'
setwd(mydir)
load("combined_results_q_acerifolia.Rdata")
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_engelmannii'
setwd(mydir)
load("combined_results_q_engelmannii.Rdata")
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_study_sims\\Simulations\\q_oglethorpensis'
setwd(mydir)
load("combined_results_q_oglethorpensis.Rdata")
#preparing data by naming a column indicating each case study species
#repeating 200 times for each species since there are 100 simulation replicates that were analzyed for equal and proportional (200 entries total)
q_acer = rep("Q. acerifolia", 200)
combined_q_acerifolia$species = q_acer
q_engel = rep("Q. engelmannii", 200)
combined_q_engelmannii$species = q_engel
q_ogle = rep("Q. oglethorpensis", 200)
combined_q_oglethorpensis$species = q_ogle
#combining all results into one larger dataframe for plotting/comparison on one graph
all_case_studies = rbind(combined_q_acerifolia, combined_q_engelmannii, combined_q_oglethorpensis)
#Creating graph using ggplot2 with all case study species compared together
#x-axis: species, y-axis: proportion of alleles captured
#the color of the boxplot indicates which strategy was used
p = ggplot(all_case_studies, aes(x=species, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) + #this line shows stars *** for significant values on the plot
ggtitle("Case study species") + #labels for plot
xlab("Species") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) + #design elements
theme_bw() #+
#theme(legend.position = "none")
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14)) #creating/displaying the plot and changing font size to be larger
