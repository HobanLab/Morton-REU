s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
plot(S~p)
plot(S, p, r)
plot(S)
plot(S~p)
plot(S~r)
plot(S~p)
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
warnings()
source('~/Research/Morton REU/equation2_brown.R', echo=TRUE)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
p
s
source('~/Research/Morton REU/equation3_brown.R', echo=TRUE)
r
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
plot(S~p)
s
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
s
table1 = table(c(p, r, S))
table1
data = data.frame(p, r. S)
data = data.frame(p, r, S)
for(i in 1:6){
print(s[i])
}
1
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
for(i in 1:6){
print(S[i])
}
#make a table to display values
to.data.frame(p, r, S)
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(i in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i,j] + (1.645*sqrt(r[i,j])) + 0.5)/(p[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
library(diveRsity)
library(adegenet)
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
files
files[[1]]
for(i in 1:length(files)) {
gen_files = list(arp2gen(files[[i]]))
}
files
hello_function()
hello_function = function() {
print("Hello world!")
}
hello_function()
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
int x = 2;
X
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
setwd('C:\\Users\\kayle\\Documents\\Morton-REU\\case_studies\\Simulations\\q_acerifolia')
#import function
#converts arlequin files to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
#loop converting .arp to .gen for all combinations and scenarios
for(i in 1:length(combinations)) {
for(j in 1:length(scenarios)) {
import_arp2gen_files(paste(my_dir,combinations[i],scenarios[j],sep=""), ".arp$")
}
}
results_q_acerifolia = array(0, dim(1, 100))
results_q_acerifolia = array(0, dim = c(1, 100))
results_q_acerifolia
results_q_acerifolia_equal = array(0, dim = c(1, 100))
results_q_acerifolia_prop = array(0, dim = c(1, 100))
mydir = 'C:\\Users\\kayle\\Documents\\Morton-REU\\case_studies\\Simulations\\q_acerifolia'
setwd(mydir)
import_arp2gen_files(my_dir, ".arp$")
import_arp2gen_files(mydir, ".arp$")
#defining arrays to store results
results_q_acerifolia_equal = array(0, dim = c(1, 100))
results_q_acerifolia_prop = array(0, dim = c(1, 100))
#array to store total arrays for each replicate
total_alleles = array(0, dim = c(1, 100))
list_files = list.files(my_dir, pattern = ".gen$")
list_files = list.files(mydir, pattern = ".gen$")
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
first_ind = first_ind[1:4]
last_ind
first_ind
sample_size_prop = as.numeric(table(temp_genind@pop)*0.12)
sample_size_equal = c(16,16,16,16)
sample_size_equal
sample_size_prop
sample_size_prop = (int)as.numeric(table(temp_genind@pop)*0.12)
sample_size_prop = as.numeric(table(temp_genind@pop)*0.12)
sample_size_prop
ceiling(sample_size_prop)
sample_size_prop = as.numeric(table(temp_genind@pop)*0.12)
sample_size_prop = ceiling(sample_size_prop) //round up values
sample_size_prop = ceiling(sample_size_prop) #round up values
sample_size_equal = c(16,16,16,16)
sample_size_equal = c(16,16,16,16)
sample_size_prop = as.numeric(table(temp_genind@pop)*0.12)
sample_size_prop = ceiling(sample_size_prop) #round up values
sample_size_prop
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]))
rows_to_samp_equal
rows_to_samp_prop
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
sample_n_alleles_equal
sample_n_alleles_prop
#saving the total alleles present
total_alleles = ncol(temp_genind@tab)
total_alleles
results_q_acerifolia_equal[1,i] = sample_n_alleles_equal/total_alleles
head(results_q_acerifolia_equal)
results_q_acerifolia_prop[1. i] = sample_n_alleles_prop/total_alleles
results_q_acerifolia_prop[1,i] = sample_n_alleles_prop/total_alleles
head(results_q_acerifolia_prop)
#array to store total arrays for each replicate
total_alleles_q_acerifolia = array(0, dim = c(1, 100))
total_alleles_q_acerifolia[1,i] = total_alleles
head(total_alleles_q_acerifolia)
setwd(mydir)
save(results_q_acerifolia_equal, results_q_acerifolia_prop, file="results_q_acerifolia.Rdata")
results_q_acerifolia_equal = as.data.frame(results_q_acerifolia_equal)
results_q_acerifolia_prop = as.data.frame(results_q_acerifolia_prop)
#converting to long format
results_q_acerifolia_equal = gather(results_q_acerifolia_equal, replicate, prop_all)
results_q_acerifolia_prop = gather(results_q_acerifolia_prop, replicate, prop_all)
#variables to keep track of strategy
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
results_q_acerifolia_equal$strategy = equal_strategy
results_q_acerifolia_prop$strategy = prop_strategy
#combining dataframes into one
combined_q_acerifolia = rbind(results_q_acerifolia_equal, results_q_acerifolia_prop)
combined_q_acerifolia
#defining arrays to store results
results_q_acerifolia_equal = array(0, dim = c(1, 100))
results_q_acerifolia_prop = array(0, dim = c(1, 100))
#array to store total arrays for each replicate
total_alleles_q_acerifolia = array(0, dim = c(1, 100))
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
first_ind = first_ind[1:4]
sample_size_equal = c(16,16,16,16)
sample_size_prop = as.numeric(table(temp_genind@pop)*0.12)
sample_size_prop = ceiling(sample_size_prop) #round up values
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]))
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#saving the total alleles present
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia_equal[1,i] = sample_n_alleles_equal/total_alleles
results_q_acerifolia_prop[1,i] = sample_n_alleles_prop/total_alleles
total_alleles_q_acerifolia[1,i] = total_alleles
}
#converting results to data frames for creating graphics
results_q_acerifolia_equal = as.data.frame(results_q_acerifolia_equal)
results_q_acerifolia_prop = as.data.frame(results_q_acerifolia_prop)
head(results_q_acerifolia_equal)
#converting to long format
results_q_acerifolia_equal = gather(results_q_acerifolia_equal, replicate, prop_all)
results_q_acerifolia_prop = gather(results_q_acerifolia_prop, replicate, prop_all)
#variables to keep track of strategy
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
results_q_acerifolia_equal$strategy = equal_strategy
results_q_acerifolia_prop$strategy = prop_strategy
#combining dataframes into one
combined_q_acerifolia = rbind(results_q_acerifolia_equal, results_q_acerifolia_prop)
combined_q_acerifolia
save(combined_q_acerifolia, file="combined_results_q_acerifolia.Rdata")
#****************************************************************************************
#Creating graphs
p = ggplot(combined_q_acerifolia, aes(fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. acerifolia") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#****************************************************************************************
#Creating graphs
p = ggplot(combined_q_acerifolia, aes(x=strategy, y=prop_all)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. acerifolia") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#****************************************************************************************
#Creating graphs
p = ggplot(combined_q_acerifolia, aes(x=strategy, y=prop_all, color = strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. acerifolia") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#****************************************************************************************
#Creating graphs
p = ggplot(combined_q_acerifolia, aes(x=strategy, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. acerifolia") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#defining arrays to store results
results_q_acerifolia_equal = array(0, dim = c(1, 100))
results_q_acerifolia_prop = array(0, dim = c(1, 100))
#array to store total arrays for each replicate
total_alleles_q_acerifolia = array(0, dim = c(1, 100))
#***********************************************************************
#Loop to simulate sampling
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
first_ind = first_ind[1:4]
sample_size_equal = c(8,8,8,8)
sample_size_prop = as.numeric(table(temp_genind@pop)*0.06)
sample_size_prop = ceiling(sample_size_prop) #round up values
rows_to_samp_equal = c(sample(first_ind[1]:last_ind[1], sample_size_equal[1]), sample(first_ind[2]:last_ind[2], sample_size_equal[2]), sample(first_ind[3]:last_ind[3], sample_size_equal[3]), sample(first_ind[4]:last_ind[4], sample_size_equal[4]))
rows_to_samp_prop = c(sample(first_ind[1]:last_ind[1], sample_size_prop[1]), sample(first_ind[2]:last_ind[2], sample_size_prop[2]), sample(first_ind[3]:last_ind[3], sample_size_prop[3]), sample(first_ind[4]:last_ind[4], sample_size_prop[4]))
sample_n_alleles_equal = sum(colSums(temp_genind@tab[rows_to_samp_equal,])>0)
sample_n_alleles_prop = sum(colSums(temp_genind@tab[rows_to_samp_prop,])>0)
#saving the total alleles present
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia_equal[1,i] = sample_n_alleles_equal/total_alleles
results_q_acerifolia_prop[1,i] = sample_n_alleles_prop/total_alleles
total_alleles_q_acerifolia[1,i] = total_alleles
}
#**************************************************************************************
#Preparing data for graphics
#converting results to data frames
results_q_acerifolia_equal = as.data.frame(results_q_acerifolia_equal)
results_q_acerifolia_prop = as.data.frame(results_q_acerifolia_prop)
#converting to long format
results_q_acerifolia_equal = gather(results_q_acerifolia_equal, replicate, prop_all)
results_q_acerifolia_prop = gather(results_q_acerifolia_prop, replicate, prop_all)
#variables to keep track of strategy
equal_strategy = rep("equal", 100)
prop_strategy = rep("proportional", 100)
results_q_acerifolia_equal$strategy = equal_strategy
results_q_acerifolia_prop$strategy = prop_strategy
#combining dataframes into one
combined_q_acerifolia = rbind(results_q_acerifolia_equal, results_q_acerifolia_prop)
setwd(mydir)
save(results_q_acerifolia_equal, results_q_acerifolia_prop, file="results_q_acerifolia.Rdata")
save(combined_q_acerifolia, file="combined_results_q_acerifolia.Rdata")
#****************************************************************************************
#Creating graphs
p = ggplot(combined_q_acerifolia, aes(x=strategy, y=prop_all, fill=strategy)) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("Q. acerifolia") +
xlab("Strategy") +
ylab("Proportion of alleles captured") +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
