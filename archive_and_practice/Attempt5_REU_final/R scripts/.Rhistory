s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S
p
p = <-seq(0.05,0.001,by=-.001) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
p <-seq(0.05,0.001,by=-.001) #defining frequencies
s = rep(0, length(p)) #declaring S to be the same length as p with values of 0
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = -3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
#for loop, iterates through the length of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001) #defining frequencies by creating a sequence of numbers from 0.05 to 0.001 by -0.001
s = rep(0, length(p)) #declaring S to be the same length as p, filled with values of 0
#for loop, iterates through the length of p calculating S for each value of p
for(i in 1:length(p)) {
S[i] = 3/(log(1-p[i])) #re-declaring S with the values calcualted by the equation
}
plot(S~p)
p <-seq(0.05,0.001,by=-.001)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
plot(S~p)
plot(S, p, r)
plot(S)
plot(S~p)
plot(S~r)
plot(S~p)
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = rep(0, length(p))
r = c(1, 2, 3, 4, 5, 6, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
warnings()
source('~/Research/Morton REU/equation2_brown.R', echo=TRUE)
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r + (1.645*sqrt(r)) + 0.5)/p
}
p
s
source('~/Research/Morton REU/equation3_brown.R', echo=TRUE)
r
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
plot(S~p)
s
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
s = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/p[i]
}
s
table1 = table(c(p, r, S))
table1
data = data.frame(p, r. S)
data = data.frame(p, r, S)
for(i in 1:6){
print(s[i])
}
1
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
for(i in 1:length(p)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
for(i in 1:6){
print(S[i])
}
#make a table to display values
to.data.frame(p, r, S)
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
S = c(0, 0, 0, 0, 0, 0)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(i in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
print(S[i])
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i] = (r[i,j] + (1.645*sqrt(r[i,j])) + 0.5)/(p[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
library(diveRsity)
library(adegenet)
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
files
files[[1]]
for(i in 1:length(files)) {
gen_files = list(arp2gen(files[[i]]))
}
files
load ("results_highMig_highSamp.Rdata")
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#saving results to R data
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\Attempt5_allcombinations_100reps\\R scripts")
load("results_highMig_highSamp.Rdata")
load("results_lowMig_highSamp.Rdata")
load("results_highMig_lowSamp.Rdata")
load("results_lowMig_lowSamp.Rdata")
#converting results arrays to dataframe
#converting results to 'long' format using gather()
results_highMig_highSamp_equal_df = as.data.frame(results_highMig_highSamp_equal)
results_highMig_highSamp_prop_df = as.data.frame(results_highMig_highSamp_prop)
results_highMig_highSamp_equal_long = gather(results_highMig_highSamp_equal_df, replicate, prop_all)
results_highMig_highSamp_prop_long = gather(results_highMig_highSamp_prop_df, replicate, prop_all)
results_lowMig_highSamp_equal_df = as.data.frame(results_lowMig_highSamp_equal)
results_lowMig_highSamp_prop_df = as.data.frame(results_lowMig_highSamp_prop)
results_lowMig_highSamp_equal_long = gather(results_lowMig_highSamp_equal_df, replicate, prop_all)
results_lowMig_highSamp_prop_long = gather(results_lowMig_highSamp_prop_df, replicate, prop_all)
results_highMig_lowSamp_equal_df = as.data.frame(results_highMig_lowSamp_equal)
results_highMig_lowSamp_prop_df = as.data.frame(results_highMig_lowSamp_prop)
results_highMig_lowSamp_equal_long = gather(results_highMig_lowSamp_equal_df, replicate, prop_all)
results_highMig_lowSamp_prop_long = gather(results_highMig_lowSamp_prop_df, replicate, prop_all)
results_lowMig_lowSamp_equal_df = as.data.frame(results_lowMig_lowSamp_equal)
results_lowMig_lowSamp_prop_df = as.data.frame(results_lowMig_lowSamp_prop)
results_lowMig_lowSamp_equal_long = gather(results_lowMig_lowSamp_equal_df, replicate, prop_all)
results_lowMig_lowSamp_prop_long = gather(results_lowMig_lowSamp_prop_df, replicate, prop_all)
#creating new columns for scenario and strategy
#variable to keep track of scenario
scenario = rep(c(1,2,3,4,5,6,7,8,9), 100)
#variables to keep track of strategy
equal_strategy = rep("equal", 900)
prop_strategy = rep("proportional", 900)
results_highMig_highSamp_equal_long$scenario = scenario
results_highMig_highSamp_prop_long$scenario = scenario
results_highMig_highSamp_equal_long$strategy = equal_strategy
results_highMig_highSamp_prop_long$strategy = prop_strategy
results_lowMig_highSamp_equal_long$scenario = scenario
results_lowMig_highSamp_prop_long$scenario = scenario
results_lowMig_highSamp_equal_long$strategy = equal_strategy
results_lowMig_highSamp_prop_long$strategy = prop_strategy
results_highMig_lowSamp_equal_long$scenario = scenario
results_highMig_lowSamp_prop_long$scenario = scenario
results_highMig_lowSamp_equal_long$strategy = equal_strategy
results_highMig_lowSamp_prop_long$strategy = prop_strategy
results_lowMig_lowSamp_equal_long$scenario = scenario
results_lowMig_lowSamp_prop_long$scenario = scenario
results_lowMig_lowSamp_equal_long$strategy = equal_strategy
results_lowMig_lowSamp_prop_long$strategy = prop_strategy
#combining dataframes for plotting
combined_highMig_highSamp = rbind(results_highMig_highSamp_equal_long, results_highMig_highSamp_prop_long)
combined_lowMig_highSamp = rbind(results_lowMig_highSamp_equal_long, results_lowMig_highSamp_prop_long)
combined_highMig_lowSamp = rbind(results_highMig_lowSamp_equal_long, results_highMig_lowSamp_prop_long)
combined_lowMig_lowSamp = rbind(results_lowMig_lowSamp_equal_long, results_lowMig_lowSamp_prop_long)
#high migration high sampling
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE) +
ggtitle("High migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#high migration high sampling
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(96,97,98,98,98)) +
ggtitle("High migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#high migration high sampling
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.98)) +
ggtitle("High migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#high migration high sampling
p = ggplot(combined_highMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) +
ggtitle("High migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration high sampling
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration high sampling
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.975,0.985,0.99,0.99,0.995)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration high sampling
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.99,0.99,0.995)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration high sampling
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#high migration low sampling
p = ggplot(combined_highMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) +
ggtitle("High migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#high migration low sampling
p = ggplot(combined_highMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.94,0.94,0.95,0.96,0.96)) +
ggtitle("High migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration low sampling
p = ggplot(combined_lowMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) +
ggtitle("Low migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration high sampling
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration high sampling
p = ggplot(combined_lowMig_highSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.985,0.985,0.985,0.985,0.99, 0.99)) +
ggtitle("Low migration high sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration low sampling
p = ggplot(combined_lowMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.98,0.98,0.985)) +
ggtitle("Low migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
#low migration low sampling
p = ggplot(combined_lowMig_lowSamp, aes(x=factor(scenario), y=prop_all, fill=strategy, color=factor(scenario))) +
geom_boxplot() +
stat_compare_means(label = "p.signif", hide.ns = TRUE, label.y = c(0.96,0.97,0.97,0.975,0.975,0.975)) +
ggtitle("Low migration low sampling intensity") +
xlab("Scenarios") +
ylab("Proportion of alleles captured") +
labs(color = "Scenario", fill = "Sample strategy") +
ylim(0.85,1) +
scale_fill_brewer() +
theme(axis.text=element_text(size=30, face="bold")) +
theme_bw()
p + theme(axis.text = element_text(size = 11, face = "bold"), axis.title = element_text(size = 14))
