for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
S
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
print(S[i,j])
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
library(adegenet)
library(diveRsity)
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file_2pop")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file_2pop", ".arp$")
genind_list = list()
genind_list = import_gen2genind_objects("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file_2pop", ".gen$")
genind_list[1]
genind_list[1]@loc.n.all
genind_list[1]
genind_list[1]@tab
(genind_list[1])@tab
pop_1 = genind_list[1]
pop_1
pop_1@loc.n.all
is.genind(genind_list[1])
genind_list[1]
pop_1 = genind_list[1]
is.genind(pop_1)
genind_complete = repool(genind_list, list = FALSE)
genind_complete
genind_complete@loc.n.all
genind_list[1]
pop_1 = genind_list[1]
pop_1
pop_1@loc.n.all
genind_complete@loc.n.all
nLoc(genind_complete)
#number of alleles for each marker
genind_complete@loc.n.all
nAll(genind_complete)
#number of individuals in the object
nInd(genind_complete)
genind_complete
locNames(genind_complete)
pop(genind_complete)
#not working
pop_1 = genind_list[1]
pop_1
pop_1@loc.n.all
#repool to one genind object
genind_complete = repool(genind_list, list = FALSE)
pop_1@loc.n.all
summary(genind_list[1])
summary(genind_list)
summary(genind_complete)
for(i in 1:length(genind_list)){
summary(genind_list[i])
}
print(summary(genind_list[i]))
#summary
summary(genind_complete)
#summary
names(summary(genind_complete))
par(mfrow=c(2,2))
#summary
summary(genind_complete)
#summary
sum_genind = summary(genind_complete)
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
#par(mfrow=c(2,2))
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
#par(mfrow=c(2,2))
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
#par(mfrow=c(2,2))
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
#summary
sum_genind = summary(genind_complete)
#par(mfrow=c(2,2))
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
text(sum_genind$n.by.pop, sum_genind$pop.n.all, lab=names(sum_genind$n.by.pop))
barplot(sum_genind$loc.n.all, ylab="Number of alleles", main="Number of alleles per locus")
#summary
sum_genind = summary(genind_complete)
#par(mfrow=c(2,2))
plot(sum_genind$n.by.pop, sum_genind$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
text(sum_genind$n.by.pop, sum_genind$pop.n.all, lab=names(sum_genind$n.by.pop))
barplot(sum_genind$loc.n.all, ylab="Number of alleles", main="Number of alleles per locus")
barplot(sum_genind$Hexp-sum_genind$Hobs, main="Heterozygosity: expected-observed", ylab="Hexp - Hobs")
barplot(sum_genind$n.by.pop, main ="Sample sizes per population", ylab="Number of genotypes", las=3)
#heterozygosity
barplot(sum_genind$Hexp-sum_genind$Hobs, main="Heterozygosity: expected-observed", ylab="Hexp - Hobs")
#not working
pop_1 = genind_list[1]
pop_1
is.genind(pop_1)
#examining list of separate genind objects
example_file_genind[2]
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
#loop to read in data
#error here
#define new function to account for error
source("arp2gen_edited.R")
#loop to read in data to get .gen files
#runs but no .gen files created (could it have been placed somewhere else?)
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen_edited(example_files[i])
}
##Converting to genind objects
example_file_genind = list()
example_filenames_gen = list.files(pattern = ".gen$")
example_filenames_gen
for(j in 1:length(example_filenames_gen)) {
example_file_genind[[j]] = read.genepop(example_filenames_gen[j], ncode = 3)
}
#examining list of separate genind objects
example_file_genind[2]
#examining list of separate genind objects
example_file_genind[2]@loc.n.all
#examining list of separate genind objects
example_file_genind[2]
#not working
rep_1 = genind_list[1]
rep_1
is.genind(rep_1)
rep_1@loc.n.all
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\all_EU_lmlb")
library(adegenet)
library(diveRsity)
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\all_EU_lmlb")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\all_EU_lmlb", ".arp")
all_EU_lmlb_genind = import_gen2genind_objects("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\all_EU_lmlb", ".gen$")
all_EU_lmlb_genind[1]
#not working
rep_1 = genind_list[[1]]
rep_1 #prints genind object
is.genind(rep_1)
#summary
sum_genind = summary(rep_1)
#summary
sum_rep_1 = summary(rep_1)
#summary
sum_rep_1 = summary(rep_1)
#par(mfrow=c(2,2))
plot(sum_rep_1$n.by.pop, sum_rep_1$pop.n.all, xlab="Sample size",
ylab="Number of alleles", main="Alleles numbers and sample sizes",
type="n")
text(sum_rep_1$n.by.pop, sum_rep_1$pop.n.all, lab=names(sum_rep_1$n.by.pop))
barplot(sum_rep_1$loc.n.all, ylab="Number of alleles", main="Number of alleles per locus")
#heterozygosity
barplot(sum_rep_1$Hexp-sum_rep_1$Hobs, main="Heterozygosity: expected-observed", ylab="Hexp - Hobs")
#heterozygosity
barplot(sum_rep_1$Hexp-sum_rep_1$Hobs, main="Heterozygosity: expected-observed", ylab="Hexp - Hobs")
barplot(sum_rep_1$n.by.pop, main ="Sample sizes per population", ylab="Number of genotypes", las=3)
##analyzing/storing results
results = array(0, dim=c(5,2,2))
results
##analyzing/storing results
results = array(0, dim=c(2,2,5))
results
seppop(genind_list[[1]])
for(i in 1:length(genind_list)) {
seppop(genind_list[[i]])
}
result[1,1,i] = nAll(genind_list[[i]]$pop1) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
for(i in 1:length(genind_list)) {
result[1,1,i] = nAll(genind_list[[i]]$pop1) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
#result[1,2,i] = anaylsis of heterozygosity pop2 - genind_list[[i]]$pop2
#result[2,1,i] = number of samples pop1 - genind_list[[i]]$pop1
#result[2,2,i] = number of samples pop2 - genind_list[[i]]$pop2
}
for(i in 1:length(genind_list)) {
seppop(genind_list[[i]])
}
genind_list[[i]]$pop1
for(i in 1:length(genind_list)) {
result[1,1,i] = nAll(genind_list[[i]]) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
#result[1,2,i] = anaylsis of heterozygosity pop2 - genind_list[[i]]$pop2
#result[2,1,i] = number of samples pop1 - genind_list[[i]]$pop1
#result[2,2,i] = number of samples pop2 - genind_list[[i]]$pop2
}
##analyzing/storing results
results = array(0, dim=c(2,2,5))##note syntax
for(i in 1:length(genind_list)) {
results[1,1,i] = nAll(genind_list[[i]]) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
#results[1,2,i] = anaylsis of heterozygosity pop2 - genind_list[[i]]$pop2
#results[2,1,i] = number of samples pop1 - genind_list[[i]]$pop1
#results[2,2,i] = number of samples pop2 - genind_list[[i]]$pop2
}
results[1,1,i] = alleles(genind_list[[i]]) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
alleles(genind_list)
alleles(genind_list[[i]])
results[1,1,i] = alleles(genind_list[[i]])/nLoc(genind_list[[i]]) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
results[1,1,i] = nAll(genind_list[[i]])/nLoc(genind_list[[i]]) #analysis heterozygosity pop1 - genind_list[[i]]$pop1
nAll(genind_list[[i]])/nLoc(genind_list[[i]])
##analyzing/storing results
results = array(0, dim=c(2,2,5))##note syntax
for(i in 1:length(genind_list)) {
results[1,1,i] = 1
results[1,2,i] = 2
results[2,1,i] = 3
results[2,2,i] = 4
}
results
popNames(genind_list)
for(i in 1:length(genind_list[[i]])) {
results[1,1,i] = 1
results[1,2,i] = 2
results[2,1,i] = 3
results[2,2,i] = 4
}
popNames(genind_list[[i]])
for(i in 1:length(genind_list[i])) {
results[1,1,i] = 1
results[1,2,i] = 2
results[2,1,i] = 3
results[2,2,i] = 4
}
x = seppop(genind_list[[1]])
x
x$pop1
for(i in 1:length(genind_list)) {
results[1,1,i] = 1
results[1,2,i] = 2
results[2,1,i] = 3
results[2,2,i] = 4
}
results
for(i in 1:length(genind_list)) {
obj = seppop(genind_list[[i]])
}
obj[[i]]
obj[i]
obj
obj[i] = list(seppop(genind_list[[i]]))
obj[[1]]
for(i in 1:length(genind_list)) {
obj[i] = list(seppop(genind_list[[i]]))
}
obj[[1]]
genind_list[[1]]
genind_list[[1]]@tab
head(pop(genind[[1]]))
head(pop(genind_list[[1]]))
head(pop(genind_list[[1]]), 50)
table(pop(genind_list[[1]]))
barplot(table(pop(genind_list[1])), col=funky(17), las=3,
xlab="Population", ylab="sample size")
barplot(table(pop(genind_list[[1]])), col=funky(17), las=3,
xlab="Population", ylab="sample size")
barplot(table(pop(genind_list[[1]])), col=funky(17), las=3,
xlab="Population", ylab="sample size")
for(i in 1:length(genind_list)) {
barplot(table(pop(genind_list[[i]])), col=funky(17), las=3,
xlab="Population", ylab="sample size")
}
barplot(table(pop(genind_list[[i]])), col=funky(17), las=3,
xlab="Population", ylab="sample size")
for(i in 1:length(genind_list)) {
barplot(table(pop(genind_list[[i]])), col=funky(17), las=3,
xlab="Population", ylab="sample size")
}
x = summary(genind_list[[1]])
x
plot(x$Hexp, x$Hobs, pch=20, cex=3, xlim=c(.4,1), ylim=c(.4,1))
abline(0,1,lty=2)
plot(x$Hexp, x$Hobs, pch=20, cex=3, xlim=c(.4,1), ylim=c(.4,1))
abline(0,1,lty=2)
par=c(3,3)
for(i in 1:length(x)) {
plot(x[[i]]$Hexp, x[[i]]$Hobs, pch=20, cex=3, xlim=c(.4,1), ylim=c(.4,1))
abline(0,1,lty=2)
}
for(i in 1:length(genind_list)) {
x[i] = list(summary(genind_list[[i]]))
}
par=c(3,3)
for(i in 1:length(x)) {
plot(x[[i]]$Hexp, x[[i]]$Hobs, pch=20, cex=3, xlim=c(.4,1), ylim=c(.4,1))
abline(0,1,lty=2)
}
plot(x[[i]]$Hexp, x[[i]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
for(i in 1:length(genind_list)) {
x[i] = list(summary(genind_list[[i]]))
}
plot(x[[i]]$Hexp, x[[i]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
x[1]
x[[2]]
x[[3]]
x[[4]]
x[[5]]
plot(x[[1]]$Hexp, x[[1]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
plot(x[[2]]$Hexp, x[[2]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
plot(x[[1]]$Hexp, x[[1]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
plot(x[[2]]$Hexp, x[[2]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
plot(x[[3]]$Hexp, x[[3]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
plot(x[[4]]$Hexp, x[[4]]$Hobs, pch=20, cex=3, xlim=c(0,1), ylim=c(0,1))
abline(0,1,lty=2)
setwd("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\example_file")
library(diveRsity)
library(adegenet)
list.files(pattern = ".arp$")
#creating a list to store all file names
example_files = list.files(pattern = ".arp$")
example_files
#create an empty list to store data read in from files
example_data = list()
#loop to read in data
#error here
#define new function to account for error
source("arp2gen_edited.R")
#loop to read in data to get .gen files
#runs but no .gen files created (could it have been placed somewhere else?)
for(i in 1:length(example_files)) {
example_data[[i]] = arp2gen_edited(example_files[i])
}
##Converting to genind objects
example_file_genind = list()
example_filenames_gen = list.files(pattern = ".gen$")
example_filenames_gen
for(j in 1:length(example_filenames_gen)) {
example_file_genind[[j]] = read.genepop(example_filenames_gen[j], ncode = 3)
}
#examining list of separate genind objects
example_file_genind[2]
folders = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2")
folders
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2")
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
library(diveRsity)
library(adegenet)
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T)
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T)
files
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
files
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", ".arp$")
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, recursive = T, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", ".arp$")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
filesimport_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", ".arp$")
files
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", ".arp$")
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T".arp$")
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, ".arp$")
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
import_arp2gen_files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", "")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
